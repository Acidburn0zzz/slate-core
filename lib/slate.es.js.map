{"version":3,"file":"slate.es.js","sources":["../src/constants/model-types.js","../src/utils/generate-key.js","../src/models/block.js","../src/models/inline.js","../src/models/data.js","../src/utils/memoize.js","../src/models/mark.js","../src/changes/at-current-range.js","../src/models/document.js","../src/models/range.js","../src/models/character.js","../src/models/leaf.js","../src/models/text.js","../src/models/node.js","../src/utils/string.js","../src/changes/at-range.js","../src/changes/by-key.js","../src/constants/operation-attributes.js","../src/models/history.js","../src/constants/core-schema-rules.js","../src/models/stack.js","../src/models/schema.js","../src/models/value.js","../src/models/operation.js","../src/operations/invert.js","../src/changes/on-history.js","../src/changes/on-selection.js","../src/changes/on-value.js","../src/changes/with-schema.js","../src/changes/index.js","../src/operations/apply.js","../src/models/change.js","../src/operations/index.js","../src/index.js"],"sourcesContent":["/**\n * Slate-specific model types.\n *\n * @type {Object}\n */\n\nconst MODEL_TYPES = {\n  BLOCK: '@@__SLATE_BLOCK__@@',\n  CHANGE: '@@__SLATE_CHANGE__@@',\n  CHARACTER: '@@__SLATE_CHARACTER__@@',\n  DOCUMENT: '@@__SLATE_DOCUMENT__@@',\n  HISTORY: '@@__SLATE_HISTORY__@@',\n  INLINE: '@@__SLATE_INLINE__@@',\n  LEAF: '@@__SLATE_LEAF__@@',\n  MARK: '@@__SLATE_MARK__@@',\n  OPERATION: '@@__SLATE_OPERATION__@@',\n  RANGE: '@@__SLATE_RANGE__@@',\n  SCHEMA: '@@__SLATE_SCHEMA__@@',\n  STACK: '@@__SLATE_STACK__@@',\n  TEXT: '@@__SLATE_TEXT__@@',\n  VALUE: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Export type identification function\n *\n * @param {string} type\n * @param {any} any\n * @return {boolean}\n */\n\nexport function isType(type, any) {\n  return !!(any && any[MODEL_TYPES[type]])\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default MODEL_TYPES\n","/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Generate a key.\n *\n * @return {String}\n */\n\nfunction generateKey() {\n  return generate()\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setKeyGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetKeyGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetKeyGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default generateKey\nexport { setKeyGenerator, resetKeyGenerator }\n","/**\n * Dependencies.\n */\n\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Map, Record } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  isVoid: false,\n  key: undefined,\n  nodes: new List(),\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const {\n      data = {},\n      isVoid = false,\n      key = generateKey(),\n      nodes = [],\n      type,\n    } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      isVoid: !!isVoid,\n      data: Map(data),\n      nodes: Block.createChildren(nodes),\n    })\n\n    return block\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Block.fromJSON\n\n  /**\n   * Check if `any` is a `Block`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlock = isType.bind(null, 'BLOCK')\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'block'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check if the block is empty.\n   * Returns true if block is not void and all it's children nodes are empty.\n   * Void node is never empty, regardless of it's content.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return !this.isVoid && !this.nodes.some(child => !child.isEmpty)\n  }\n\n  /**\n   * Get the concatenated text of all the block's children.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      isVoid: this.isVoid,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nBlock.prototype[MODEL_TYPES.BLOCK] = true\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","/**\n * Dependencies.\n */\n\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Map, Record } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  isVoid: false,\n  key: undefined,\n  nodes: new List(),\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const {\n      data = {},\n      isVoid = false,\n      key = generateKey(),\n      nodes = [],\n      type,\n    } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      isVoid: !!isVoid,\n      data: new Map(data),\n      nodes: Inline.createChildren(nodes),\n    })\n\n    return inline\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Inline.fromJSON\n\n  /**\n   * Check if `any` is a `Inline`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInline = isType.bind(null, 'INLINE')\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'inline'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check if the inline is empty.\n   * Returns true if inline is not void and all it's children nodes are empty.\n   * Void node is never empty, regardless of it's content.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return !this.isVoid && !this.nodes.some(child => !child.isEmpty)\n  }\n\n  /**\n   * Get the concatenated text of all the inline's children.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      isVoid: this.isVoid,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nInline.prototype[MODEL_TYPES.INLINE] = true\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * GLOBAL: Changing this cache key will clear all previous cached results.\n *\n * @type {Number}\n */\n\nlet CACHE_KEY = 0\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Object}\n */\n\nconst LEAF = {}\n\n/**\n * A value to represent a memoized undefined value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Object}\n */\n\nconst UNDEFINED = {}\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      // If the cache key is different, previous caches must be cleared.\n      if (CACHE_KEY !== this.__cache_key) {\n        this.__cache_key = CACHE_KEY\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n        this.__cache_no_args = {}\n        this.__cache_no_args.__proto__ = null\n      }\n\n      if (!this.__cache) {\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      }\n\n      if (!this.__cache_no_args) {\n        this.__cache_no_args = {}\n        this.__cache_no_args.__proto__ = null\n      }\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(this.__cache, keys)\n      } else {\n        cachedValue = this.__cache_no_args[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        this.__cache = setIn(this.__cache, keys, v)\n      } else {\n        this.__cache_no_args[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (const key of keys) {\n    map = map.get(key)\n    if (map === UNSET) return UNSET\n  }\n\n  return map.get(LEAF)\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let parent = map\n  let child\n\n  for (const key of keys) {\n    child = parent.get(key)\n\n    // If the path was not created yet...\n    if (child === UNSET) {\n      child = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      parent.set(key, child)\n    }\n\n    parent = child\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child.set(LEAF, value)\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  CACHE_KEY++\n\n  if (CACHE_KEY >= Number.MAX_SAFE_INTEGER) {\n    CACHE_KEY = 0\n  }\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { Map, Record, Set } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Data from './data'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Mark.fromJSON\n\n  /**\n   * Check if `any` is a `Mark`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMark = isType.bind(null, 'MARK')\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Object.\n   */\n\n  get object() {\n    return 'mark'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Get the component for the node from a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Component|Void}\n   */\n\n  getComponent(schema) {\n    return schema.__getComponent(this)\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nMark.prototype[MODEL_TYPES.MARK] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Mark.prototype, ['getComponent'])\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import logger from 'slate-dev-logger'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Mix in the changes that pass through to their at-range equivalents because\n * they don't have any effect on the selection.\n */\n\nconst PROXY_TRANSFORMS = [\n  'deleteBackward',\n  'deleteCharBackward',\n  'deleteLineBackward',\n  'deleteWordBackward',\n  'deleteForward',\n  'deleteCharForward',\n  'deleteWordForward',\n  'deleteLineForward',\n  'setBlocks',\n  'setInlines',\n  'splitInline',\n  'unwrapBlock',\n  'unwrapInline',\n  'wrapBlock',\n  'wrapInline',\n]\n\nPROXY_TRANSFORMS.forEach(method => {\n  Changes[method] = (change, ...args) => {\n    const { value } = change\n    const { selection } = value\n    const methodAtRange = `${method}AtRange`\n    change[methodAtRange](selection, ...args)\n\n    if (method.match(/Backward$/)) {\n      change.collapseToStart()\n    } else if (method.match(/Forward$/)) {\n      change.collapseToEnd()\n    }\n  }\n})\n\nChanges.setBlock = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setBlock` method of Slate changes has been renamed to `setBlocks`.'\n  )\n\n  Changes.setBlocks(...args)\n}\n\nChanges.setInline = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setInline` method of Slate changes has been renamed to `setInlines`.'\n  )\n\n  Changes.setInlines(...args)\n}\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMarks = (change, marks) => {\n  marks.forEach(mark => change.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Change} change\n */\n\nChanges.delete = change => {\n  const { value } = change\n  const { selection } = value\n  change.deleteAtRange(selection)\n\n  // Ensure that the selection is collapsed to the start, because in certain\n  // cases when deleting across inline nodes, when splitting the inline node the\n  // end point of the selection will end up after the split point.\n  change.collapseToStart()\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Block} block\n */\n\nChanges.insertBlock = (change, block) => {\n  block = Block.create(block)\n  const { value } = change\n  const { selection } = value\n  change.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(block.key)\n  if (node) change.collapseToEndOf(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Change} change\n * @param {Document} fragment\n */\n\nChanges.insertFragment = (change, fragment) => {\n  if (!fragment.nodes.size) return\n\n  let { value } = change\n  let { document, selection } = value\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    selection.hasEdgeAtStartOf(startText) ||\n    selection.hasEdgeAtEndOf(endText)\n\n  const isInserting =\n    fragment.hasBlocks(firstChild.key) || fragment.hasBlocks(lastChild.key)\n\n  change.insertFragmentAtRange(selection, fragment)\n  value = change.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && (lastInline || isInserting)) {\n    change.select(selection.collapseToEndOf(newText))\n  } else if (newText) {\n    change.select(\n      selection.collapseToStartOf(newText).move(lastText.text.length)\n    )\n  } else {\n    change.select(selection.collapseToStart().move(lastText.text.length))\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Inline} inline\n */\n\nChanges.insertInline = (change, inline) => {\n  inline = Inline.create(inline)\n  const { value } = change\n  const { selection } = value\n  change.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(inline.key)\n  if (node) change.collapseToEndOf(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Change} change\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertText = (change, text, marks) => {\n  const { value } = change\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  change.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document != change.value.document) {\n    change.select({ marks: null })\n  }\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Change} change\n * @param {Number} depth (optional)\n */\n\nChanges.splitBlock = (change, depth = 1) => {\n  const { value } = change\n  const { selection, document } = value\n  const marks = selection.marks || document.getInsertMarksAtRange(selection)\n  change.splitBlockAtRange(selection, depth).collapseToEnd()\n\n  if (marks && marks.size !== 0) {\n    change.select({ marks })\n  }\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.removeMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\nChanges.replaceMark = (change, oldMark, newMark) => {\n  change.removeMark(oldMark)\n  change.addMark(newMark)\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.toggleMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    change.removeMark(mark)\n  } else {\n    change.addMark(mark)\n  }\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Change} change\n * @param {String} prefix\n * @param {String} suffix\n */\n\nChanges.wrapText = (change, prefix, suffix = prefix) => {\n  const { value } = change\n  const { selection } = value\n  change.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    change.moveStart(0 - prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  change.moveEnd(0 - suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward != change.value.selection.isForward) {\n    change.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","/**\n * Dependencies.\n */\n\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Map, Record } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  key: undefined,\n  nodes: new List(),\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = generateKey(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: Document.createChildren(nodes),\n    })\n\n    return document\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Document.fromJSON\n\n  /**\n   * Check if `any` is a `Document`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isDocument = isType.bind(null, 'DOCUMENT')\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'document'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check if the document is empty.\n   * Returns true if all it's children nodes are empty.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return !this.nodes.some(child => !child.isEmpty)\n  }\n\n  /**\n   * Get the concatenated text of all the document's children.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nDocument.prototype[MODEL_TYPES.DOCUMENT] = true\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchorKey: null,\n  anchorOffset: 0,\n  focusKey: null,\n  focusOffset: 0,\n  isBackward: null,\n  isFocused: false,\n  marks: null,\n  isAtomic: false,\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      return {\n        anchorKey: attrs.anchorKey,\n        anchorOffset: attrs.anchorOffset,\n        focusKey: attrs.focusKey,\n        focusOffset: attrs.focusOffset,\n        isBackward: attrs.isBackward,\n        isFocused: attrs.isFocused,\n        marks: attrs.marks,\n        isAtomic: attrs.isAtomic,\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('anchorKey' in attrs) props.anchorKey = attrs.anchorKey\n      if ('anchorOffset' in attrs) props.anchorOffset = attrs.anchorOffset\n      if ('anchorPath' in attrs) props.anchorPath = attrs.anchorPath\n      if ('focusKey' in attrs) props.focusKey = attrs.focusKey\n      if ('focusOffset' in attrs) props.focusOffset = attrs.focusOffset\n      if ('focusPath' in attrs) props.focusPath = attrs.focusPath\n      if ('isBackward' in attrs) props.isBackward = attrs.isBackward\n      if ('isFocused' in attrs) props.isFocused = attrs.isFocused\n      if ('marks' in attrs)\n        props.marks = attrs.marks == null ? null : Mark.createSet(attrs.marks)\n      if ('isAtomic' in attrs) props.isAtomic = attrs.isAtomic\n      return props\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const {\n      anchorKey = null,\n      anchorOffset = 0,\n      focusKey = null,\n      focusOffset = 0,\n      isBackward = null,\n      isFocused = false,\n      marks = null,\n      isAtomic = false,\n    } = object\n\n    const range = new Range({\n      anchorKey,\n      anchorOffset,\n      focusKey,\n      focusOffset,\n      isBackward,\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n      isAtomic,\n    })\n\n    return range\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Range.fromJSON\n\n  /**\n   * Check if an `obj` is a `Range`.\n   *\n   * @param {Any} obj\n   * @return {Boolean}\n   */\n\n  static isRange(obj) {\n    return !!(obj && obj[MODEL_TYPES.RANGE])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'range'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check whether the range is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchorKey == this.focusKey && this.anchorOffset == this.focusOffset\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    return this.isBackward == null ? null : !this.isBackward\n  }\n\n  /**\n   * Check whether the range's keys are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.anchorKey != null && this.focusKey != null\n  }\n\n  /**\n   * Check whether the range's keys are not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Get the start key.\n   *\n   * @return {String}\n   */\n\n  get startKey() {\n    return this.isBackward ? this.focusKey : this.anchorKey\n  }\n\n  /**\n   * Get the start offset.\n   *\n   * @return {String}\n   */\n\n  get startOffset() {\n    return this.isBackward ? this.focusOffset : this.anchorOffset\n  }\n\n  /**\n   * Get the end key.\n   *\n   * @return {String}\n   */\n\n  get endKey() {\n    return this.isBackward ? this.anchorKey : this.focusKey\n  }\n\n  /**\n   * Get the end offset.\n   *\n   * @return {String}\n   */\n\n  get endOffset() {\n    return this.isBackward ? this.anchorOffset : this.focusOffset\n  }\n\n  /**\n   * Check whether anchor point of the range is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasAnchorAtStartOf(node) {\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.anchorOffset != 0) return false\n    const first = getFirst(node)\n    return this.anchorKey == first.key\n  }\n\n  /**\n   * Check whether anchor point of the range is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasAnchorAtEndOf(node) {\n    const last = getLast(node)\n    return this.anchorKey == last.key && this.anchorOffset == last.text.length\n  }\n\n  /**\n   * Check whether the anchor edge of a range is in a `node` and at an\n   * offset between `start` and `end`.\n   *\n   * @param {Node} node\n   * @param {Number} start\n   * @param {Number} end\n   * @return {Boolean}\n   */\n\n  hasAnchorBetween(node, start, end) {\n    return (\n      this.anchorOffset <= end &&\n      start <= this.anchorOffset &&\n      this.hasAnchorIn(node)\n    )\n  }\n\n  /**\n   * Check whether the anchor edge of a range is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasAnchorIn(node) {\n    return node.object == 'text'\n      ? node.key == this.anchorKey\n      : this.anchorKey != null && node.hasDescendant(this.anchorKey)\n  }\n\n  /**\n   * Check whether focus point of the range is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasFocusAtEndOf(node) {\n    const last = getLast(node)\n    return this.focusKey == last.key && this.focusOffset == last.text.length\n  }\n\n  /**\n   * Check whether focus point of the range is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasFocusAtStartOf(node) {\n    if (this.focusOffset != 0) return false\n    const first = getFirst(node)\n    return this.focusKey == first.key\n  }\n\n  /**\n   * Check whether the focus edge of a range is in a `node` and at an\n   * offset between `start` and `end`.\n   *\n   * @param {Node} node\n   * @param {Number} start\n   * @param {Number} end\n   * @return {Boolean}\n   */\n\n  hasFocusBetween(node, start, end) {\n    return (\n      start <= this.focusOffset &&\n      this.focusOffset <= end &&\n      this.hasFocusIn(node)\n    )\n  }\n\n  /**\n   * Check whether the focus edge of a range is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasFocusIn(node) {\n    return node.object == 'text'\n      ? node.key == this.focusKey\n      : this.focusKey != null && node.hasDescendant(this.focusKey)\n  }\n\n  /**\n   * Check whether the range is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOf(node) {\n    return this.isCollapsed && this.hasAnchorAtStartOf(node)\n  }\n\n  /**\n   * Check whether the range is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOf(node) {\n    return this.isCollapsed && this.hasAnchorAtEndOf(node)\n  }\n\n  /**\n   * Focus the range.\n   *\n   * @return {Range}\n   */\n\n  focus() {\n    return this.merge({\n      isFocused: true,\n    })\n  }\n\n  /**\n   * Blur the range.\n   *\n   * @return {Range}\n   */\n\n  blur() {\n    return this.merge({\n      isFocused: false,\n    })\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  deselect() {\n    return this.merge({\n      anchorKey: null,\n      anchorOffset: 0,\n      focusKey: null,\n      focusOffset: 0,\n      isFocused: false,\n      isBackward: false,\n    })\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    return this.merge({\n      anchorKey: this.focusKey,\n      anchorOffset: this.focusOffset,\n      focusKey: this.anchorKey,\n      focusOffset: this.anchorOffset,\n      isBackward: this.isBackward == null ? null : !this.isBackward,\n    })\n  }\n\n  /**\n   * Move the anchor offset `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Range}\n   */\n\n  moveAnchor(n = 1) {\n    const { anchorKey, focusKey, focusOffset, isBackward } = this\n    const anchorOffset = this.anchorOffset + n\n    return this.merge({\n      anchorOffset,\n      isBackward:\n        anchorKey == focusKey ? anchorOffset > focusOffset : isBackward,\n    })\n  }\n\n  /**\n   * Move the anchor offset `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Range}\n   */\n\n  moveFocus(n = 1) {\n    const { anchorKey, anchorOffset, focusKey, isBackward } = this\n    const focusOffset = this.focusOffset + n\n    return this.merge({\n      focusOffset,\n      isBackward:\n        focusKey == anchorKey ? anchorOffset > focusOffset : isBackward,\n    })\n  }\n\n  /**\n   * Move the range's anchor point to a `key` and `offset`.\n   *\n   * @param {String} key\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(key, offset) {\n    const { anchorKey, focusKey, focusOffset, isBackward } = this\n    return this.merge({\n      anchorKey: key,\n      anchorOffset: offset,\n      isBackward:\n        key == focusKey\n          ? offset > focusOffset\n          : key == anchorKey ? isBackward : null,\n    })\n  }\n\n  /**\n   * Move the range's focus point to a `key` and `offset`.\n   *\n   * @param {String} key\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(key, offset) {\n    const { focusKey, anchorKey, anchorOffset, isBackward } = this\n    return this.merge({\n      focusKey: key,\n      focusOffset: offset,\n      isBackward:\n        key == anchorKey\n          ? anchorOffset > offset\n          : key == focusKey ? isBackward : null,\n    })\n  }\n\n  /**\n   * Move the range to `anchorOffset`.\n   *\n   * @param {Number} anchorOffset\n   * @return {Range}\n   */\n\n  moveAnchorOffsetTo(anchorOffset) {\n    return this.merge({\n      anchorOffset,\n      isBackward:\n        this.anchorKey == this.focusKey\n          ? anchorOffset > this.focusOffset\n          : this.isBackward,\n    })\n  }\n\n  /**\n   * Move the range to `focusOffset`.\n   *\n   * @param {Number} focusOffset\n   * @return {Range}\n   */\n\n  moveFocusOffsetTo(focusOffset) {\n    return this.merge({\n      focusOffset,\n      isBackward:\n        this.anchorKey == this.focusKey\n          ? this.anchorOffset > focusOffset\n          : this.isBackward,\n    })\n  }\n\n  /**\n   * Move the range to `anchorOffset` and `focusOffset`.\n   *\n   * @param {Number} anchorOffset\n   * @param {Number} focusOffset (optional)\n   * @return {Range}\n   */\n\n  moveOffsetsTo(anchorOffset, focusOffset = anchorOffset) {\n    return this.moveAnchorOffsetTo(anchorOffset).moveFocusOffsetTo(focusOffset)\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    return this.moveFocusTo(this.anchorKey, this.anchorOffset)\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    return this.moveAnchorTo(this.focusKey, this.focusOffset)\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOf(node) {\n    node = getFirst(node)\n    return this.moveAnchorTo(node.key, 0)\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOf(node) {\n    node = getLast(node)\n    return this.moveAnchorTo(node.key, node.text.length)\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOf(node) {\n    node = getFirst(node)\n    return this.moveFocusTo(node.key, 0)\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOf(node) {\n    node = getLast(node)\n    return this.moveFocusTo(node.key, node.text.length)\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOf(start, end = start) {\n    const range = this.isBackward ? this.flip() : this\n    return range.moveAnchorToStartOf(start).moveFocusToEndOf(end)\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    const range = this\n    let { anchorKey, anchorOffset, focusKey, focusOffset, isBackward } = range\n\n    const anchorOffsetType = typeof anchorOffset\n    const focusOffsetType = typeof focusOffset\n\n    if (anchorOffsetType != 'number' || focusOffsetType != 'number') {\n      logger.warn(\n        `The range offsets should be numbers, but they were of type \"${anchorOffsetType}\" and \"${focusOffsetType}\".`\n      )\n    }\n\n    // If the range is unset, make sure it is properly zeroed out.\n    if (anchorKey == null || focusKey == null) {\n      return range.merge({\n        anchorKey: null,\n        anchorOffset: 0,\n        focusKey: null,\n        focusOffset: 0,\n        isBackward: false,\n      })\n    }\n\n    // Get the anchor and focus nodes.\n    let anchorNode = node.getDescendant(anchorKey)\n    let focusNode = node.getDescendant(focusKey)\n\n    // If the range is malformed, warn and zero it out.\n    if (!anchorNode || !focusNode) {\n      logger.warn(\n        'The range was invalid and was reset. The range in question was:',\n        range\n      )\n\n      const first = node.getFirstText()\n      return range.merge({\n        anchorKey: first ? first.key : null,\n        anchorOffset: 0,\n        focusKey: first ? first.key : null,\n        focusOffset: 0,\n        isBackward: false,\n      })\n    }\n\n    // If the anchor node isn't a text node, match it to one.\n    if (anchorNode.object != 'text') {\n      logger.warn(\n        'The range anchor was set to a Node that is not a Text node. This should not happen and can degrade performance. The node in question was:',\n        anchorNode\n      )\n\n      const anchorText = anchorNode.getTextAtOffset(anchorOffset)\n      const offset = anchorNode.getOffset(anchorText.key)\n      anchorOffset = anchorOffset - offset\n      anchorNode = anchorText\n    }\n\n    // If the focus node isn't a text node, match it to one.\n    if (focusNode.object != 'text') {\n      logger.warn(\n        'The range focus was set to a Node that is not a Text node. This should not happen and can degrade performance. The node in question was:',\n        focusNode\n      )\n\n      const focusText = focusNode.getTextAtOffset(focusOffset)\n      const offset = focusNode.getOffset(focusText.key)\n      focusOffset = focusOffset - offset\n      focusNode = focusText\n    }\n\n    // If `isBackward` is not set, derive it.\n    if (isBackward == null) {\n      if (anchorNode.key === focusNode.key) {\n        isBackward = anchorOffset > focusOffset\n      } else {\n        isBackward = !node.areDescendantsSorted(anchorNode.key, focusNode.key)\n      }\n    }\n\n    // Merge in any updated properties.\n    return range.merge({\n      anchorKey: anchorNode.key,\n      anchorOffset,\n      focusKey: focusNode.key,\n      focusOffset,\n      isBackward,\n    })\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      anchorKey: this.anchorKey,\n      anchorOffset: this.anchorOffset,\n      focusKey: this.focusKey,\n      focusOffset: this.focusOffset,\n      isBackward: this.isBackward,\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n      isAtomic: this.isAtomic,\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nRange.prototype[MODEL_TYPES.RANGE] = true\n\n/**\n * Mix in some \"move\" convenience methods.\n */\n\nconst MOVE_METHODS = [\n  ['move', ''],\n  ['move', 'To'],\n  ['move', 'ToStartOf'],\n  ['move', 'ToEndOf'],\n]\n\nMOVE_METHODS.forEach(([p, s]) => {\n  Range.prototype[`${p}${s}`] = function(...args) {\n    return this[`${p}Anchor${s}`](...args)[`${p}Focus${s}`](...args)\n  }\n})\n\n/**\n * Mix in the \"start\", \"end\" and \"edge\" convenience methods.\n */\n\nconst EDGE_METHODS = [\n  ['has', 'AtStartOf', true],\n  ['has', 'AtEndOf', true],\n  ['has', 'Between', true],\n  ['has', 'In', true],\n  ['collapseTo', ''],\n  ['move', ''],\n  ['moveTo', ''],\n  ['move', 'To'],\n  ['move', 'OffsetTo'],\n]\n\nEDGE_METHODS.forEach(([p, s, hasEdge]) => {\n  const anchor = `${p}Anchor${s}`\n  const focus = `${p}Focus${s}`\n\n  Range.prototype[`${p}Start${s}`] = function(...args) {\n    return this.isBackward ? this[focus](...args) : this[anchor](...args)\n  }\n\n  Range.prototype[`${p}End${s}`] = function(...args) {\n    return this.isBackward ? this[anchor](...args) : this[focus](...args)\n  }\n\n  if (hasEdge) {\n    Range.prototype[`${p}Edge${s}`] = function(...args) {\n      return this[anchor](...args) || this[focus](...args)\n    }\n  }\n})\n\n/**\n * Mix in some aliases for convenience / parallelism with the browser APIs.\n */\n\nconst ALIAS_METHODS = [\n  ['collapseTo', 'moveTo'],\n  ['collapseToAnchor', 'moveToAnchor'],\n  ['collapseToFocus', 'moveToFocus'],\n  ['collapseToStart', 'moveToStart'],\n  ['collapseToEnd', 'moveToEnd'],\n  ['collapseToStartOf', 'moveToStartOf'],\n  ['collapseToEndOf', 'moveToEndOf'],\n  ['extend', 'moveFocus'],\n  ['extendTo', 'moveFocusTo'],\n  ['extendToStartOf', 'moveFocusToStartOf'],\n  ['extendToEndOf', 'moveFocusToEndOf'],\n]\n\nALIAS_METHODS.forEach(([alias, method]) => {\n  Range.prototype[alias] = function(...args) {\n    return this[method](...args)\n  }\n})\n\n/**\n * Get the first text of a `node`.\n *\n * @param {Node} node\n * @return {Text}\n */\n\nfunction getFirst(node) {\n  return node.object == 'text' ? node : node.getFirstText()\n}\n\n/**\n * Get the last text of a `node`.\n *\n * @param {Node} node\n * @return {Text}\n */\n\nfunction getLast(node) {\n  return node.object == 'text' ? node : node.getLastText()\n}\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: new Set(),\n  text: '',\n}\n\n/**\n * Character.\n *\n * @type {Character}\n */\n\nclass Character extends Record(DEFAULTS) {\n  /**\n   * Create a `Character` with `attrs`.\n   *\n   * @param {Object|String|Character} attrs\n   * @return {Character}\n   */\n\n  static create(attrs = {}) {\n    if (Character.isCharacter(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Character.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Character.create\\` only accepts objects, strings or characters, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Characters` from `elements`.\n   *\n   * @param {String|Array<Object|Character|String>|List<Object|Character|String>} elements\n   * @return {List<Character>}\n   */\n\n  static createList(elements = []) {\n    if (typeof elements == 'string') {\n      elements = elements.split('')\n    }\n\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Character.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts strings, arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Character` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Character}\n   */\n\n  static fromJSON(object) {\n    const { text, marks = [] } = object\n\n    if (typeof text != 'string') {\n      throw new Error('`Character.fromJSON` requires a block `text` string.')\n    }\n\n    const character = new Character({\n      text,\n      marks: new Set(marks),\n    })\n\n    return character\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Character.fromJSON\n\n  /**\n   * Check if `any` is a `Character`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isCharacter = isType.bind(null, 'CHARACTER')\n\n  /**\n   * Check if `any` is a character list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isCharacterList(any) {\n    return List.isList(any) && any.every(item => Character.isCharacter(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'character'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Return a JSON representation of the character.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nCharacter.prototype[MODEL_TYPES.CHARACTER] = true\n\n/**\n * Export.\n *\n * @type {Character}\n */\n\nexport default Character\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Character from './character'\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: Set(),\n  text: '',\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a valid List of `Leaf` from `leaves`\n   *\n   * @param {List<Leaf>} leaves\n   * @return {List<Leaf>}\n   */\n\n  static createLeaves(leaves) {\n    if (leaves.size <= 1) return leaves\n\n    let invalid = false\n\n    // TODO: we can make this faster with [List] and then flatten\n    const result = List().withMutations(cache => {\n      // Search from the leaves left end to find invalid node;\n      leaves.findLast((leaf, index) => {\n        const firstLeaf = cache.first()\n\n        // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n        if (firstLeaf) {\n          // If marks equals, then the two leaves can be connected\n          if (firstLeaf.marks.equals(leaf.marks)) {\n            invalid = true\n            cache.set(0, firstLeaf.set('text', `${leaf.text}${firstLeaf.text}`))\n            return\n          }\n\n          // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n          if (firstLeaf.text === '') {\n            invalid = true\n            cache.set(0, leaf)\n            return\n          }\n\n          // If the current leaf is empty, drop the leaf\n          if (leaf.text === '') {\n            invalid = true\n            return\n          }\n        }\n\n        cache.unshift(leaf)\n      })\n    })\n\n    if (!invalid) return leaves\n    return result\n  }\n\n  /**\n   * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n   * Corner Cases:\n   *   1. if offset is smaller than 0, then return [List(), leaves]\n   *   2. if offset is bigger than the text length, then return [leaves, List()]\n   *\n   * @param {List<Leaf> leaves\n   * @return {Array<List<Leaf>>}\n   */\n\n  static splitLeaves(leaves, offset) {\n    if (offset < 0) return [List(), leaves]\n\n    if (leaves.size === 0) {\n      return [List(), List()]\n    }\n\n    let endOffset = 0\n    let index = -1\n    let left, right\n\n    leaves.find(leaf => {\n      index++\n      const startOffset = endOffset\n      const { text } = leaf\n      endOffset += text.length\n\n      if (endOffset < offset) return false\n      if (startOffset > offset) return false\n\n      const length = offset - startOffset\n      left = leaf.set('text', text.slice(0, length))\n      right = leaf.set('text', text.slice(length))\n      return true\n    })\n\n    if (!left) return [leaves, List()]\n\n    if (left.text === '') {\n      if (index === 0) {\n        return [List.of(left), leaves]\n      }\n\n      return [leaves.take(index), leaves.skip(index)]\n    }\n\n    if (right.text === '') {\n      if (index === leaves.size - 1) {\n        return [leaves, List.of(right)]\n      }\n\n      return [leaves.take(index + 1), leaves.skip(index + 1)]\n    }\n\n    return [\n      leaves.take(index).push(left),\n      leaves.skip(index + 1).unshift(right),\n    ]\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Leaf.fromJSON\n\n  /**\n   * Check if `any` is a `Leaf`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeaf = isType.bind(null, 'LEAF')\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'leaf'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Return leaf as a list of characters\n   *\n   * @return {List<Character>}\n   */\n\n  getCharacters() {\n    logger.deprecate(\n      'slate@0.34.0',\n      'The `characters` property of Slate objects is deprecated'\n    )\n\n    const { marks } = this\n    const characters = Character.createList(\n      this.text.split('').map(char => {\n        return Character.create({\n          text: char,\n          marks,\n        })\n      })\n    )\n\n    return characters\n  }\n\n  /**\n   * Update a `mark` at leaf, replace with newMark\n   *\n   * @param {Mark} mark\n   * @param {Mark} newMark\n   * @returns {Leaf}\n   */\n\n  updateMark(mark, newMark) {\n    const { marks } = this\n    if (newMark.equals(mark)) return this\n    if (!marks.has(mark)) return this\n    const newMarks = marks.withMutations(collection => {\n      collection.remove(mark).add(newMark)\n    })\n    return this.set('marks', newMarks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   *\n   * @param {Set<Mark>} set\n   * @returns {Text}\n   */\n\n  addMarks(set) {\n    const { marks } = this\n    return this.set('marks', marks.union(set))\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  removeMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.remove(mark))\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nLeaf.prototype[MODEL_TYPES.LEAF] = true\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, OrderedSet, Record, Set } from 'immutable'\n\nimport Leaf from './leaf'\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  leaves: List(),\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { key = generateKey() } = object\n    let { leaves = List() } = object\n\n    if (Array.isArray(leaves)) {\n      leaves = List(leaves.map(x => Leaf.create(x)))\n    } else if (List.isList(leaves)) {\n      leaves = leaves.map(x => Leaf.create(x))\n    } else {\n      throw new Error('leaves must be either Array or Immutable.List')\n    }\n\n    const node = new Text({\n      leaves: Leaf.createLeaves(leaves),\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Text.fromJSON\n\n  /**\n   * Check if `any` is a `Text`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isText = isType.bind(null, 'TEXT')\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'text'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Is the node empty?\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return this.text == ''\n  }\n\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getString()\n  }\n\n  /**\n   * Get the concatenated text of the node, cached for text getter\n   *\n   * @returns {String}\n   */\n\n  getString() {\n    return this.leaves.reduce((string, leaf) => string + leaf.text, '')\n  }\n\n  /**\n   * Get the concatenated characters of the node;\n   *\n   * @returns {String}\n   */\n\n  get characters() {\n    return this.leaves.flatMap(x => x.getCharacters())\n  }\n\n  /**\n   * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n   * Corner Cases:\n   *   1. if offset is negative, return the first leaf;\n   *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n   *\n   * @param {number}\n   * @returns {Object}\n   *   @property {number} startOffset\n   *   @property {number} endOffset\n   *   @property {number} index\n   *   @property {Leaf} leaf\n   */\n\n  searchLeafAtOffset(offset) {\n    let endOffset = 0\n    let startOffset = 0\n    let index = -1\n\n    const leaf = this.leaves.find(l => {\n      index++\n      startOffset = endOffset\n      endOffset = startOffset + l.text.length\n      return endOffset >= offset\n    })\n\n    return {\n      leaf,\n      endOffset,\n      index,\n      startOffset,\n    }\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = Set.of(mark)\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   * Corner Cases:\n   *   1. If empty text, and if length === 0 and index === 0\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n\n      if (!first) {\n        return this.set(\n          'leaves',\n          List.of(Leaf.fromJSON({ text: '', marks: set }))\n        )\n      }\n\n      const newFirst = first.addMarks(set)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (this.text === '') return this\n    if (length === 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.addMarks(set)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Get the decorations for the node from a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Array}\n   */\n\n  getDecorations(schema) {\n    return schema.__getDecorations(this)\n  }\n\n  /**\n   * Derive the leaves for a list of `decorations`.\n   *\n   * @param {Array|Void} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations = []) {\n    let { leaves } = this\n    if (leaves.size === 0) return List.of(Leaf.create({}))\n    if (!decorations || decorations.length === 0) return leaves\n    if (this.text.length === 0) return leaves\n    const { key } = this\n\n    decorations.forEach(range => {\n      const { startKey, endKey, startOffset, endOffset, marks } = range\n      const hasStart = startKey == key\n      const hasEnd = endKey == key\n\n      if (hasStart && hasEnd) {\n        const index = hasStart ? startOffset : 0\n        const length = hasEnd ? endOffset - index : this.text.length - index\n\n        if (length < 1) return\n        if (index >= this.text.length) return\n\n        if (index !== 0 || length < this.text.length) {\n          const [before, bundle] = Leaf.splitLeaves(leaves, index)\n          const [middle, after] = Leaf.splitLeaves(bundle, length)\n          leaves = before.concat(middle.map(x => x.addMarks(marks)), after)\n          return\n        }\n      }\n\n      leaves = leaves.map(x => x.addMarks(marks))\n    })\n\n    if (leaves === this.leaves) return leaves\n    return Leaf.createLeaves(leaves)\n  }\n\n  /**\n   * Get all of the active marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getActiveMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.intersect(leaf.marks)\n      if (result && result.size === 0) return false\n      return false\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the active marks on the text\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarks() {\n    if (this.leaves.size === 0) return Set()\n\n    const result = this.leaves.first().marks\n    if (result.size === 0) return result\n\n    return result.withMutations(x => {\n      this.leaves.forEach(c => {\n        x.intersect(c.marks)\n        if (x.size === 0) return false\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.union(leaf.marks)\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    if (this.leaves.size === 0) return []\n    const first = this.leaves.first().marks\n    if (this.leaves.size === 1) return first.toArray()\n\n    const result = []\n\n    this.leaves.forEach(leaf => {\n      result.push(leaf.marks.toArray())\n    })\n\n    return Array.prototype.concat.apply(first.toArray(), result)\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   * Corner Cases:\n   *   1. if no text is before the index, and index !== 0, then return Set()\n   *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n   *   3. if index === 0, text !== '', return Set()\n   *\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    const { leaf } = this.searchLeafAtOffset(index)\n    if (!leaf) return Set()\n    return leaf.marks\n  }\n\n  /**\n   * Get a node by `key`, to parallel other nodes.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNode(key) {\n    return this.key == key ? this : null\n  }\n\n  /**\n   * Check if the node has a node by `key`, to parallel other nodes.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasNode(key) {\n    return !!this.getNode(key)\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} offset\n   * @param {String} text\n   * @param {Set} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(offset, text, marks) {\n    if (this.text === '') {\n      return this.set('leaves', List.of(Leaf.create({ text, marks })))\n    }\n\n    if (text.length === 0) return this\n    if (!marks) marks = Set()\n\n    const { startOffset, leaf, index } = this.searchLeafAtOffset(offset)\n    const delta = offset - startOffset\n    const beforeText = leaf.text.slice(0, delta)\n    const afterText = leaf.text.slice(delta)\n    const { leaves } = this\n\n    if (leaf.marks.equals(marks)) {\n      return this.set(\n        'leaves',\n        leaves.set(index, leaf.set('text', beforeText + text + afterText))\n      )\n    }\n\n    const nextLeaves = leaves.splice(\n      index,\n      1,\n      leaf.set('text', beforeText),\n      Leaf.create({ text, marks }),\n      leaf.set('text', afterText)\n    )\n\n    return this.setLeaves(nextLeaves)\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Text}\n   */\n\n  regenerateKey() {\n    const key = generateKey()\n    return this.set('key', key)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    if (this.text === '' && index === 0 && length === 0) {\n      const first = this.leaves.first()\n      if (!first) return this\n      const newFirst = first.removeMark(mark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.removeMark(mark)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Remove text from the text node at `start` for `length`.\n   *\n   * @param {Number} start\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(start, length) {\n    if (length <= 0) return this\n    if (start >= this.text.length) return this\n\n    // PERF: For simple backspace, we can operate directly on the leaf\n    if (length === 1) {\n      const { leaf, index, startOffset } = this.searchLeafAtOffset(start + 1)\n      const offset = start - startOffset\n\n      if (leaf) {\n        if (leaf.text.length === 1) {\n          const leaves = this.leaves.remove(index)\n          return this.setLeaves(leaves)\n        }\n\n        const beforeText = leaf.text.slice(0, offset)\n        const afterText = leaf.text.slice(offset + length)\n        const text = beforeText + afterText\n\n        if (text.length > 0) {\n          return this.set(\n            'leaves',\n            this.leaves.set(index, leaf.set('text', text))\n          )\n        }\n      }\n    }\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, start)\n    const after = Leaf.splitLeaves(bundle, length)[1]\n    const leaves = Leaf.createLeaves(before.concat(after))\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (first.text === '') {\n        return this.set(\n          'leaves',\n          List.of(first.set('marks', this.getActiveMarks()))\n        )\n      }\n    }\n\n    return this.set('leaves', leaves)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Text}\n   */\n\n  updateMark(index, length, mark, properties) {\n    const newMark = mark.merge(properties)\n\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n      if (!first) return this\n      const newFirst = first.updateMark(mark, newMark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n\n    const leaves = before.concat(\n      middle.map(x => x.updateMark(mark, newMark)),\n      after\n    )\n\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Split this text and return two different texts\n   * @param {Number} position\n   * @returns {Array<Text>}\n   */\n\n  splitText(offset) {\n    const splitted = Leaf.splitLeaves(this.leaves, offset)\n    const one = this.set('leaves', splitted[0])\n    const two = this.set('leaves', splitted[1]).regenerateKey()\n    return [one, two]\n  }\n\n  /**\n   * merge this text and another text at the end\n   * @param {Text} text\n   * @returns {Text}\n   */\n\n  mergeText(text) {\n    const leaves = this.leaves.concat(text.leaves)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Validate the text node against a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Object|Void}\n   */\n\n  validate(schema) {\n    return schema.validateNode(this)\n  }\n\n  /**\n   * Get the first invalid descendant\n   * PERF: Do not cache this method; because it can cause cycle reference\n   *\n   * @param {Schema} schema\n   * @returns {Text|Null}\n   */\n\n  getFirstInvalidDescendant(schema) {\n    return this.validate(schema) ? this : null\n  }\n\n  /**\n   * Set leaves with normalized `leaves`\n   *\n   * @param {Schema} schema\n   * @returns {Text|Null}\n   */\n\n  setLeaves(leaves) {\n    const result = Leaf.createLeaves(leaves)\n\n    if (result.size === 1) {\n      const first = result.first()\n\n      if (!first.marks || first.marks.size === 0) {\n        if (first.text === '') {\n          return this.set('leaves', List())\n        }\n      }\n    }\n\n    return this.set('leaves', Leaf.createLeaves(leaves))\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nText.prototype[MODEL_TYPES.TEXT] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, [\n  'getDecorations',\n  'getActiveMarks',\n  'getMarks',\n  'getMarksAsArray',\n  'validate',\n  'getString',\n])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","import direction from 'direction'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, OrderedSet, Set } from 'immutable'\n\nimport Data from './data'\nimport Block from './block'\nimport Inline from './inline'\nimport Document from './document'\nimport { isType } from '../constants/model-types'\nimport Range from './range'\nimport Text from './text'\nimport generateKey from '../utils/generate-key'\nimport memoize from '../utils/memoize'\n\n/**\n * Node.\n *\n * And interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        logger.deprecate(\n          'slate@0.32.0',\n          'The `kind` property of Slate objects has been renamed to `object`.'\n        )\n\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        isVoid: attrs.isVoid,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      if ('isVoid' in attrs) props.isVoid = attrs.isVoid\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      logger.deprecate(\n        'slate@0.32.0',\n        'The `kind` property of Slate objects has been renamed to `object`.'\n      )\n\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Node.fromJSON\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return !!['BLOCK', 'DOCUMENT', 'INLINE', 'TEXT'].find(type =>\n      isType(type, any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n\n  /**\n   * True if the node has both descendants in that order, false otherwise. The\n   * order is depth-first, post-order.\n   *\n   * @param {String} first\n   * @param {String} second\n   * @return {Boolean}\n   */\n\n  areDescendantsSorted(first, second) {\n    first = assertKey(first)\n    second = assertKey(second)\n\n    const keys = this.getKeysAsArray()\n    const firstIndex = keys.indexOf(first)\n    const secondIndex = keys.indexOf(second)\n    if (firstIndex == -1 || secondIndex == -1) return null\n\n    return firstIndex < secondIndex\n  }\n\n  /**\n   * Assert that a node has a child by `key` and return it.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  assertChild(key) {\n    const child = this.getChild(key)\n\n    if (!child) {\n      key = assertKey(key)\n      throw new Error(`Could not find a child node with key \"${key}\".`)\n    }\n\n    return child\n  }\n\n  /**\n   * Assert that a node has a descendant by `key` and return it.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  assertDescendant(key) {\n    const descendant = this.getDescendant(key)\n\n    if (!descendant) {\n      key = assertKey(key)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    return descendant\n  }\n\n  /**\n   * Assert that a node's tree has a node by `key` and return it.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  assertNode(key) {\n    const node = this.getNode(key)\n\n    if (!node) {\n      key = assertKey(key)\n      throw new Error(`Could not find a node with key \"${key}\".`)\n    }\n\n    return node\n  }\n\n  /**\n   * Assert that a node exists at `path` and return it.\n   *\n   * @param {Array} path\n   * @return {Node}\n   */\n\n  assertPath(path) {\n    const descendant = this.getDescendantAtPath(path)\n\n    if (!descendant) {\n      throw new Error(`Could not find a descendant at path \"${path}\".`)\n    }\n\n    return descendant\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find all descendant nodes by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object != 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get the path of ancestors of a descendant node by `key`.\n   *\n   * @param {String|Node} key\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(key) {\n    key = assertKey(key)\n\n    if (key == this.key) return List()\n    if (this.hasChild(key)) return List([this])\n\n    let ancestors\n\n    this.nodes.find(node => {\n      if (node.object == 'text') return false\n      ancestors = node.getAncestors(key)\n      return ancestors\n    })\n\n    if (ancestors) {\n      return ancestors.unshift(this)\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object != 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    const array = this.getBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return new List(new OrderedSet(array))\n  }\n\n  /**\n   * Get the leaf block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n\n    const { startKey, endKey } = range\n    const startBlock = this.getClosestBlock(startKey)\n\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startBlock]\n\n    const endBlock = this.getClosestBlock(endKey)\n    const blocks = this.getBlocksAsArray()\n    const start = blocks.indexOf(startBlock)\n    const end = blocks.indexOf(endBlock)\n    return blocks.slice(start, end + 1)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return new List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object != 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type == type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get all of the characters for every text node.\n   *\n   * @return {List<Character>}\n   */\n\n  getCharacters() {\n    return this.getTexts().flatMap(t => t.characters)\n  }\n\n  /**\n   * Get a list of the characters in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Character>}\n   */\n\n  getCharactersAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return List()\n    const { startKey, endKey, startOffset, endOffset } = range\n\n    if (startKey === endKey) {\n      const endText = this.getDescendant(endKey)\n      return endText.characters.slice(startOffset, endOffset)\n    }\n\n    return this.getTextsAtRange(range).flatMap(t => {\n      if (t.key === startKey) {\n        return t.characters.slice(startOffset)\n      }\n\n      if (t.key === endKey) {\n        return t.characters.slice(0, endOffset)\n      }\n      return t.characters\n    })\n  }\n\n  /**\n   * Get a child node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getChild(key) {\n    key = assertKey(key)\n    return this.nodes.find(node => node.key == key)\n  }\n\n  /**\n   * Get closest parent of node by `key` that matches `iterator`.\n   *\n   * @param {String} key\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(key, iterator) {\n    key = assertKey(key)\n    const ancestors = this.getAncestors(key)\n\n    if (!ancestors) {\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    // Exclude this node itself.\n    return ancestors.rest().findLast(iterator)\n  }\n\n  /**\n   * Get the closest block parent of a `node`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(key) {\n    return this.getClosest(key, parent => parent.object == 'block')\n  }\n\n  /**\n   * Get the closest inline parent of a `node`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getClosestInline(key) {\n    return this.getClosest(key, parent => parent.object == 'inline')\n  }\n\n  /**\n   * Get the closest void parent of a `node`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(key) {\n    return this.getClosest(key, parent => parent.isVoid)\n  }\n\n  /**\n   * Get the common ancestor of nodes `one` and `two` by keys.\n   *\n   * @param {String} one\n   * @param {String} two\n   * @return {Node}\n   */\n\n  getCommonAncestor(one, two) {\n    one = assertKey(one)\n    two = assertKey(two)\n\n    if (one == this.key) return this\n    if (two == this.key) return this\n\n    this.assertDescendant(one)\n    this.assertDescendant(two)\n    let ancestors = new List()\n    let oneParent = this.getParent(one)\n    let twoParent = this.getParent(two)\n\n    while (oneParent) {\n      ancestors = ancestors.push(oneParent)\n      oneParent = this.getParent(oneParent.key)\n    }\n\n    while (twoParent) {\n      if (ancestors.includes(twoParent)) return twoParent\n      twoParent = this.getParent(twoParent.key)\n    }\n  }\n\n  /**\n   * Get the decorations for the node from a `stack`.\n   *\n   * @param {Stack} stack\n   * @return {List}\n   */\n\n  getDecorations(stack) {\n    const decorations = stack.find('decorateNode', this)\n    const list = Range.createList(decorations || [])\n    return list\n  }\n\n  /**\n   * Get the depth of a child node by `key`, with optional `startAt`.\n   *\n   * @param {String} key\n   * @param {Number} startAt (optional)\n   * @return {Number} depth\n   */\n\n  getDepth(key, startAt = 1) {\n    this.assertDescendant(key)\n    if (this.hasChild(key)) return startAt\n    return this.getFurthestAncestor(key).getDepth(key, startAt + 1)\n  }\n\n  /**\n   * Get a descendant node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getDescendant(key) {\n    key = assertKey(key)\n    let descendantFound = null\n\n    const found = this.nodes.find(node => {\n      if (node.key === key) {\n        return node\n      } else if (node.object !== 'text') {\n        descendantFound = node.getDescendant(key)\n        return descendantFound\n      } else {\n        return false\n      }\n    })\n\n    return descendantFound || found\n  }\n\n  /**\n   * Get a descendant by `path`.\n   *\n   * @param {Array} path\n   * @return {Node|Null}\n   */\n\n  getDescendantAtPath(path) {\n    let descendant = this\n\n    for (const index of path) {\n      if (!descendant) return\n      if (!descendant.nodes) return\n      descendant = descendant.nodes.get(index)\n    }\n\n    return descendant\n  }\n\n  /**\n   * Get the first child text node.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    let descendantFound = null\n\n    const found = this.nodes.find(node => {\n      if (node.object == 'text') return true\n      descendantFound = node.getFirstText()\n      return descendantFound\n    })\n\n    return descendantFound || found\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return Document.create()\n\n    let node = this\n\n    // Make sure the children exist.\n    const { startKey, startOffset, endKey, endOffset } = range\n    const startText = node.assertDescendant(startKey)\n    const endText = node.assertDescendant(endKey)\n\n    // Split at the start and end.\n    let child = startText\n    let previous\n    let parent\n\n    while ((parent = node.getParent(child.key))) {\n      const index = parent.nodes.indexOf(child)\n      const position =\n        child.object == 'text' ? startOffset : child.nodes.indexOf(previous)\n\n      parent = parent.splitNode(index, position)\n      node = node.updateNode(parent)\n      previous = parent.nodes.get(index + 1)\n      child = parent\n    }\n\n    child = startKey == endKey ? node.getNextText(startKey) : endText\n\n    while ((parent = node.getParent(child.key))) {\n      const index = parent.nodes.indexOf(child)\n      const position =\n        child.object == 'text'\n          ? startKey == endKey ? endOffset - startOffset : endOffset\n          : child.nodes.indexOf(previous)\n\n      parent = parent.splitNode(index, position)\n      node = node.updateNode(parent)\n      previous = parent.nodes.get(index + 1)\n      child = parent\n    }\n\n    // Get the start and end nodes.\n    const startNode = node.getNextSibling(\n      node.getFurthestAncestor(startKey).key\n    )\n    const endNode =\n      startKey == endKey\n        ? node.getNextSibling(\n            node.getNextSibling(node.getFurthestAncestor(endKey).key).key\n          )\n        : node.getNextSibling(node.getFurthestAncestor(endKey).key)\n\n    // Get children range of nodes from start to end nodes\n    const startIndex = node.nodes.indexOf(startNode)\n    const endIndex = node.nodes.indexOf(endNode)\n    const nodes = node.nodes.slice(startIndex, endIndex)\n\n    // Return a new document fragment.\n    return Document.create({ nodes })\n  }\n\n  /**\n   * Get the furthest parent of a node by `key` that matches an `iterator`.\n   *\n   * @param {String} key\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(key, iterator) {\n    const ancestors = this.getAncestors(key)\n\n    if (!ancestors) {\n      key = assertKey(key)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    // Exclude this node itself\n    return ancestors.rest().find(iterator)\n  }\n\n  /**\n   * Get the furthest block parent of a node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(key) {\n    return this.getFurthest(key, node => node.object == 'block')\n  }\n\n  /**\n   * Get the furthest inline parent of a node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(key) {\n    return this.getFurthest(key, node => node.object == 'inline')\n  }\n\n  /**\n   * Get the furthest ancestor of a node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(key) {\n    key = assertKey(key)\n    return this.nodes.find(node => {\n      if (node.key == key) return true\n      if (node.object == 'text') return false\n      return node.hasDescendant(key)\n    })\n  }\n\n  /**\n   * Get the furthest ancestor of a node by `key` that has only one child.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(key) {\n    const ancestors = this.getAncestors(key)\n\n    if (!ancestors) {\n      key = assertKey(key)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    const result = ancestors\n      // Skip this node...\n      .shift()\n      // Take parents until there are more than one child...\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      // And pick the highest.\n      .last()\n    if (!result) return null\n    return result\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object == 'text') return\n\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    const array = this.getInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    return new List(new OrderedSet(array))\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n\n    return this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    return new List(array)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    return this.nodes.reduce((inlines, node) => {\n      if (node.object == 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type == type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Return a set of all keys in the node as an array.\n   *\n   * @return {Array<String>}\n   */\n\n  getKeysAsArray() {\n    const keys = []\n\n    this.forEachDescendant(desc => {\n      keys.push(desc.key)\n    })\n\n    return keys\n  }\n\n  /**\n   * Return a set of all keys in the node.\n   *\n   * @return {Set<String>}\n   */\n\n  getKeys() {\n    const keys = this.getKeysAsArray()\n    return new Set(keys)\n  }\n\n  /**\n   * Get the last child text node.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    let descendantFound = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object == 'text') return true\n      descendantFound = node.getLastText()\n      return descendantFound\n    })\n\n    return descendantFound || found\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new Set(array)\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    // PERF: use only one concat rather than multiple concat\n    // becuase one concat is faster\n    const result = []\n\n    this.nodes.forEach(node => {\n      result.push(node.getMarksAsArray())\n    })\n    return Array.prototype.concat.apply([], result)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    return new Set(this.getOrderedMarksAtRange(range))\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(range.startKey, range.startOffset)\n    }\n\n    const { startKey, startOffset } = range\n    const text = this.getDescendant(startKey)\n    return text.getMarksAtIndex(startOffset + 1)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return OrderedSet()\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(range.startKey, range.startOffset)\n    }\n\n    const { startKey, startOffset, endKey, endOffset } = range\n    return this.getOrderedMarksBetweenPositions(\n      startKey,\n      startOffset,\n      endKey,\n      endOffset\n    )\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   * PERF: arguments use key and offset for utilizing cache\n   *\n   * @param {string} startKey\n   * @param {number} startOffset\n   * @param {string} endKey\n   * @param {number} endOffset\n   * @returns {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksBetweenPositions(startKey, startOffset, endKey, endOffset) {\n    if (startKey === endKey) {\n      const startText = this.getDescendant(startKey)\n      return startText.getMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const texts = this.getTextsBetweenPositionsAsArray(startKey, endKey)\n\n    return OrderedSet().withMutations(result => {\n      texts.forEach(text => {\n        if (text.key === startKey) {\n          result.union(\n            text.getMarksBetweenOffsets(startOffset, text.text.length)\n          )\n        } else if (text.key === endKey) {\n          result.union(text.getMarksBetweenOffsets(0, endOffset))\n        } else {\n          result.union(text.getMarks())\n        }\n      })\n    })\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      const { startKey, startOffset } = range\n      return this.getMarksAtPosition(startKey, startOffset).toSet()\n    }\n\n    let { startKey, endKey, startOffset, endOffset } = range\n    let startText = this.getDescendant(startKey)\n\n    if (startKey !== endKey) {\n      while (startKey !== endKey && endOffset === 0) {\n        const endText = this.getPreviousText(endKey)\n        endKey = endText.key\n        endOffset = endText.text.length\n      }\n\n      while (startKey !== endKey && startOffset === startText.text.length) {\n        startText = this.getNextText(startKey)\n        startKey = startText.key\n        startOffset = 0\n      }\n    }\n\n    if (startKey === endKey) {\n      return startText.getActiveMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const startMarks = startText.getActiveMarksBetweenOffsets(\n      startOffset,\n      startText.text.length\n    )\n    if (startMarks.size === 0) return Set()\n    const endText = this.getDescendant(endKey)\n    const endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset)\n    let marks = startMarks.intersect(endMarks)\n    // If marks is already empty, the active marks is empty\n    if (marks.size === 0) return marks\n\n    let text = this.getNextText(startKey)\n\n    while (text.key !== endKey) {\n      if (text.text.length !== 0) {\n        marks = marks.intersect(text.getActiveMarks())\n        if (marks.size === 0) return Set()\n      }\n\n      text = this.getNextText(text.key)\n    }\n    return marks\n  }\n\n  /**\n   * Get a set of marks in a `position`, the equivalent of a collapsed range\n   *\n   * @param {string} key\n   * @param {number} offset\n   * @return {Set}\n   */\n\n  getMarksAtPosition(key, offset) {\n    const text = this.getDescendant(key)\n    const currentMarks = text.getMarksAtIndex(offset)\n    if (offset !== 0) return currentMarks\n    const closestBlock = this.getClosestBlock(key)\n\n    if (closestBlock.text === '') {\n      // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n      return currentMarks\n    }\n\n    const previous = this.getPreviousText(key)\n    if (!previous) return Set()\n\n    if (closestBlock.hasDescendant(previous.key)) {\n      return previous.getMarksAtIndex(previous.text.length)\n    }\n\n    return currentMarks\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return new Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      return node.object == 'text'\n        ? array.concat(node.getMarksAsArray().filter(m => m.type == type))\n        : array.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextBlock(key) {\n    const child = this.assertDescendant(key)\n    let last\n\n    if (child.object == 'block') {\n      last = child.getLastText()\n    } else {\n      const block = this.getClosestBlock(key)\n      last = block.getLastText()\n    }\n\n    const next = this.getNextText(last.key)\n    if (!next) return null\n\n    return this.getClosestBlock(next.key)\n  }\n\n  /**\n   * Get the node after a descendant by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextSibling(key) {\n    key = assertKey(key)\n\n    const parent = this.getParent(key)\n    const after = parent.nodes.skipUntil(child => child.key == key)\n\n    if (after.size == 0) {\n      throw new Error(`Could not find a child node with key \"${key}\".`)\n    }\n    return after.get(1)\n  }\n\n  /**\n   * Get the text node after a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextText(key) {\n    key = assertKey(key)\n    return this.getTexts()\n      .skipUntil(text => text.key == key)\n      .get(1)\n  }\n\n  /**\n   * Get a node in the tree by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNode(key) {\n    key = assertKey(key)\n    return this.key == key ? this : this.getDescendant(key)\n  }\n\n  /**\n   * Get a node in the tree by `path`.\n   *\n   * @param {Array} path\n   * @return {Node|Null}\n   */\n\n  getNodeAtPath(path) {\n    return path.length ? this.getDescendantAtPath(path) : this\n  }\n\n  /**\n   * Get the offset for a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n\n  getOffset(key) {\n    this.assertDescendant(key)\n\n    // Calculate the offset of the nodes before the highest child.\n    const child = this.getFurthestAncestor(key)\n    const offset = this.nodes\n      .takeUntil(n => n == child)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    return this.hasChild(key) ? offset : offset + child.getOffset(key)\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = range.normalize(this)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { startKey, startOffset } = range\n    return this.getOffset(startKey) + startOffset\n  }\n\n  /**\n   * Get the parent of a child node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getParent(key) {\n    if (this.hasChild(key)) return this\n\n    let node = null\n\n    this.nodes.find(child => {\n      if (child.object == 'text') {\n        return false\n      } else {\n        node = child.getParent(key)\n        return node\n      }\n    })\n\n    return node\n  }\n\n  /**\n   * Get the path of a descendant node by `key`.\n   *\n   * @param {String|Node} key\n   * @return {Array}\n   */\n\n  getPath(key) {\n    let child = this.assertNode(key)\n    const ancestors = this.getAncestors(key)\n    const path = []\n\n    ancestors.reverse().forEach(ancestor => {\n      const index = ancestor.nodes.indexOf(child)\n      path.unshift(index)\n      child = ancestor\n    })\n\n    return path\n  }\n\n  /**\n   * Refind the path of node if path is changed.\n   *\n   * @param {Array} path\n   * @param {String} key\n   * @return {Array}\n   */\n\n  refindPath(path, key) {\n    const node = this.getDescendantAtPath(path)\n\n    if (node && node.key === key) {\n      return path\n    }\n\n    return this.getPath(key)\n  }\n\n  /**\n   *\n   * Refind the node with the same node.key after change.\n   *\n   * @param {Array} path\n   * @param {String} key\n   * @return {Node|Void}\n   */\n\n  refindNode(path, key) {\n    const node = this.getDescendantAtPath(path)\n\n    if (node && node.key === key) {\n      return node\n    }\n\n    return this.getDescendant(key)\n  }\n\n  /**\n   * Get the placeholder for the node from a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Component|Void}\n   */\n\n  getPlaceholder(schema) {\n    return schema.__getPlaceholder(this)\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(key) {\n    const child = this.assertDescendant(key)\n    let first\n\n    if (child.object == 'block') {\n      first = child.getFirstText()\n    } else {\n      const block = this.getClosestBlock(key)\n      first = block.getFirstText()\n    }\n\n    const previous = this.getPreviousText(first.key)\n    if (!previous) return null\n\n    return this.getClosestBlock(previous.key)\n  }\n\n  /**\n   * Get the node before a descendant node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(key) {\n    key = assertKey(key)\n    const parent = this.getParent(key)\n    const before = parent.nodes.takeUntil(child => child.key == key)\n\n    if (before.size == parent.nodes.size) {\n      throw new Error(`Could not find a child node with key \"${key}\".`)\n    }\n\n    return before.last()\n  }\n\n  /**\n   * Get the text node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousText(key) {\n    key = assertKey(key)\n    return this.getTexts()\n      .takeUntil(text => text.key == key)\n      .last()\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = true) {\n    const { startKey, endKey } = range\n\n    // PERF: if we're not selected, we can exit early.\n    if (!isSelected) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (startKey == endKey) {\n      const child = this.getFurthestAncestor(startKey)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let start = null\n    let end = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object == 'text') {\n        if (start == null && child.key == startKey) start = i\n        if (end == null && child.key == endKey) end = i + 1\n      } else {\n        if (start == null && child.hasDescendant(startKey)) start = i\n        if (end == null && child.hasDescendant(endKey)) end = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return start == null || end == null\n    })\n\n    if (isSelected && start == null) start = 0\n    if (isSelected && end == null) end = this.nodes.size\n    return start == null ? null : { start, end }\n  }\n\n  /**\n   * Get the concatenated text string of all child nodes.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    return this.nodes.reduce((string, node) => {\n      return string + node.text\n    }, '')\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset == 0) return this.getFirstText()\n    if (offset == this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n\n    return this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir == 'neutral' ? undefined : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object == 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return List()\n    const { startKey, endKey } = range\n    return new List(this.getTextsBetweenPositionsAsArray(startKey, endKey))\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   * PERF: use key in arguments for cache\n   *\n   * @param {string} startKey\n   * @param {string} endKey\n   * @returns {Array}\n   */\n\n  getTextsBetweenPositionsAsArray(startKey, endKey) {\n    const startText = this.getDescendant(startKey)\n\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startText]\n\n    const endText = this.getDescendant(endKey)\n    const texts = this.getTextsAsArray()\n    const start = texts.indexOf(startText)\n    const end = texts.indexOf(endText, start)\n    return texts.slice(start, end + 1)\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n    const { startKey, endKey } = range\n    return this.getTextsBetweenPositionsAsArray(startKey, endKey)\n  }\n\n  /**\n   * Check if a child node exists by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasChild(key) {\n    return !!this.getChild(key)\n  }\n\n  /**\n   * Check if a node has block node children.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasBlocks(key) {\n    const node = this.assertNode(key)\n    return !!(node.nodes && node.nodes.find(n => n.object === 'block'))\n  }\n\n  /**\n   * Check if a node has inline node children.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasInlines(key) {\n    const node = this.assertNode(key)\n    return !!(\n      node.nodes && node.nodes.find(n => Inline.isInline(n) || Text.isText(n))\n    )\n  }\n\n  /**\n   * Recursively check if a child node exists by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasDescendant(key) {\n    return !!this.getDescendant(key)\n  }\n\n  /**\n   * Recursively check if a node exists by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasNode(key) {\n    return !!this.getNode(key)\n  }\n\n  /**\n   * Check if a node has a void parent by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasVoidParent(key) {\n    return !!this.getClosestVoid(key)\n  }\n\n  /**\n   * Insert a `node` at `index`.\n   *\n   * @param {Number} index\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(index, node) {\n    const keys = this.getKeysAsArray()\n\n    if (keys.includes(node.key)) {\n      node = node.regenerateKey()\n    }\n\n    if (node.object != 'text') {\n      node = node.mapDescendants(desc => {\n        return keys.includes(desc.key) ? desc.regenerateKey() : desc\n      })\n    }\n\n    const nodes = this.nodes.insert(index, node)\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Check whether the node is in a `range`.\n   *\n   * @param {Range} range\n   * @return {Boolean}\n   */\n\n  isInRange(range) {\n    range = range.normalize(this)\n\n    const node = this\n    const { startKey, endKey, isCollapsed } = range\n\n    // PERF: solve the most common cast where the start or end key are inside\n    // the node, for collapsed selections.\n    if (\n      node.key == startKey ||\n      node.key == endKey ||\n      node.hasDescendant(startKey) ||\n      node.hasDescendant(endKey)\n    ) {\n      return true\n    }\n\n    // PERF: if the selection is collapsed and the previous check didn't return\n    // true, then it must be false.\n    if (isCollapsed) {\n      return false\n    }\n\n    // Otherwise, look through all of the leaf text nodes in the range, to see\n    // if any of them are inside the node.\n    const texts = node.getTextsAtRange(range)\n    let memo = false\n\n    texts.forEach(text => {\n      if (node.hasDescendant(text.key)) memo = true\n      return memo\n    })\n\n    return memo\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    return this.object == 'block' && this.nodes.every(n => n.object != 'block')\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    return (\n      this.object == 'inline' && this.nodes.every(n => n.object != 'inline')\n    )\n  }\n\n  /**\n   * Merge a children node `first` with another children node `second`.\n   * `first` and `second` will be concatenated in that order.\n   * `first` and `second` must be two Nodes or two Text.\n   *\n   * @param {Node} first\n   * @param {Node} second\n   * @return {Node}\n   */\n\n  mergeNode(withIndex, index) {\n    let node = this\n    let one = node.nodes.get(withIndex)\n    const two = node.nodes.get(index)\n\n    if (one.object != two.object) {\n      throw new Error(\n        `Tried to merge two nodes of different objects: \"${one.object}\" and \"${\n          two.object\n        }\".`\n      )\n    }\n\n    // If the nodes are text nodes, concatenate their leaves together\n    if (one.object == 'text') {\n      one = one.mergeText(two)\n    } else {\n      // Otherwise, concatenate their child nodes together.\n      const nodes = one.nodes.concat(two.nodes)\n      one = one.set('nodes', nodes)\n    }\n\n    node = node.removeNode(index)\n    node = node.removeNode(withIndex)\n    node = node.insertNode(withIndex, one)\n    return node\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret != node) nodes = nodes.set(ret.key, ret)\n    })\n\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, index) => {\n      let ret = node\n      if (ret.object != 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, index, this.nodes)\n      if (ret == node) return\n\n      nodes = nodes.set(index, ret)\n    })\n\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = generateKey()\n    return this.set('key', key)\n  }\n\n  /**\n   * Remove a `node` from the children node map.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  removeDescendant(key) {\n    key = assertKey(key)\n\n    let node = this\n    let parent = node.getParent(key)\n    if (!parent)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n\n    const index = parent.nodes.findIndex(n => n.key === key)\n    const nodes = parent.nodes.delete(index)\n\n    parent = parent.set('nodes', nodes)\n    node = node.updateNode(parent)\n    return node\n  }\n\n  /**\n   * Remove a node at `index`.\n   *\n   * @param {Number} index\n   * @return {Node}\n   */\n\n  removeNode(index) {\n    const nodes = this.nodes.delete(index)\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Split a child node by `index` at `position`.\n   *\n   * @param {Number} index\n   * @param {Number} position\n   * @return {Node}\n   */\n\n  splitNode(index, position) {\n    let node = this\n    const child = node.nodes.get(index)\n    let one\n    let two\n\n    // If the child is a text node, the `position` refers to the text offset at\n    // which to split it.\n    if (child.object == 'text') {\n      ;[one, two] = child.splitText(position)\n    } else {\n      // Otherwise, if the child is not a text node, the `position` refers to the\n      // index at which to split its children.\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      one = child.set('nodes', befores)\n      two = child.set('nodes', afters).regenerateKey()\n    }\n\n    // Remove the old node and insert the newly split children.\n    node = node.removeNode(index)\n    node = node.insertNode(index, two)\n    node = node.insertNode(index, one)\n    return node\n  }\n\n  /**\n   * Set a new value for a child node by `key`.\n   *\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  updateNode(node) {\n    if (node.key == this.key) {\n      return node\n    }\n\n    let child = this.assertDescendant(node.key)\n    const ancestors = this.getAncestors(node.key)\n\n    ancestors.reverse().forEach(parent => {\n      let { nodes } = parent\n      const index = nodes.indexOf(child)\n      child = parent\n      nodes = nodes.set(index, node)\n      parent = parent.set('nodes', nodes)\n      node = parent\n    })\n\n    return node\n  }\n\n  /**\n   * Validate the node against a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Function|Null}\n   */\n\n  validate(schema) {\n    return schema.validateNode(this)\n  }\n\n  /**\n   * Get the first invalid descendant\n   *\n   * @param {Schema} schema\n   * @return {Node|Text|Null}\n   */\n\n  getFirstInvalidDescendant(schema) {\n    let result = null\n\n    this.nodes.find(n => {\n      result = n.validate(schema) ? n : n.getFirstInvalidDescendant(schema)\n      return result\n    })\n    return result\n  }\n}\n\n/**\n * Assert a key `arg`.\n *\n * @param {String} arg\n * @return {String}\n */\n\nfunction assertKey(arg) {\n  if (typeof arg == 'string') return arg\n  throw new Error(\n    `Invalid \\`key\\` argument! It must be a key string, but you passed: ${arg}`\n  )\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Node.prototype, [\n  'areDescendantsSorted',\n  'getAncestors',\n  'getBlocksAsArray',\n  'getBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getChild',\n  'getClosestBlock',\n  'getClosestInline',\n  'getClosestVoid',\n  'getCommonAncestor',\n  'getDecorations',\n  'getDepth',\n  'getDescendant',\n  'getDescendantAtPath',\n  'getFirstText',\n  'getFragmentAtRange',\n  'getFurthestBlock',\n  'getFurthestInline',\n  'getFurthestAncestor',\n  'getFurthestOnlyChildAncestor',\n  'getInlinesAsArray',\n  'getInlinesAtRangeAsArray',\n  'getInlinesByTypeAsArray',\n  'getMarksAsArray',\n  'getMarksAtPosition',\n  'getOrderedMarksBetweenPositions',\n  'getInsertMarksAtRange',\n  'getKeysAsArray',\n  'getLastText',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getNextSibling',\n  'getNextText',\n  'getNode',\n  'getNodeAtPath',\n  'getOffset',\n  'getOffsetAtRange',\n  'getParent',\n  'getPath',\n  'getPlaceholder',\n  'getPreviousBlock',\n  'getPreviousSibling',\n  'getPreviousText',\n  'getText',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsBetweenPositionsAsArray',\n  'isLeafBlock',\n  'isLeafInline',\n  'validate',\n  'getFirstInvalidDescendant',\n])\n\n/**\n * Mix in `Node` methods.\n */\n\nObject.getOwnPropertyNames(Node.prototype).forEach(method => {\n  if (method == 'constructor') return\n  Block.prototype[method] = Node.prototype[method]\n  Inline.prototype[method] = Node.prototype[method]\n  Document.prototype[method] = Node.prototype[method]\n})\n\nBlock.createChildren = Node.createList\nInline.createChildren = Node.createList\nDocument.createChildren = Node.createList\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharOffsetForward,\n  getCharOffsetBackward,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n}\n","import { List } from 'immutable'\nimport logger from 'slate-dev-logger'\n\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport String from '../utils/string'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.addMarkAtRange = (change, range, mark, options = {}) => {\n  if (range.isCollapsed) return\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset, endKey, endOffset } = range\n  const texts = document.getTextsAtRange(range)\n\n  texts.forEach(node => {\n    const { key } = node\n    let index = 0\n    let length = node.text.length\n\n    if (key == startKey) index = startOffset\n    if (key == endKey) length = endOffset\n    if (key == startKey && key == endKey) length = endOffset - startOffset\n\n    change.addMarkByKey(key, index, length, mark, { normalize })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Array<Mixed>} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.addMarksAtRange = (change, range, marks, options = {}) => {\n  marks.forEach(mark => change.addMarkAtRange(range, mark, options))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteAtRange = (change, range, options = {}) => {\n  if (range.isCollapsed) return\n\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  change.snapshotSelection()\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  let { startKey, startOffset, endKey, endOffset } = range\n  let { document } = value\n  let isStartVoid = document.hasVoidParent(startKey)\n  let isEndVoid = document.hasVoidParent(endKey)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey)\n  }\n\n  // If the start node is inside a void node, remove the void node and update\n  // the starting point to be right after it, continuously until the start point\n  // is not a void, or until the entire range is handled.\n  while (isStartVoid) {\n    const startVoid = document.getClosestVoid(startKey)\n    const nextText = document.getNextText(startKey)\n    change.removeNodeByKey(startVoid.key, { normalize: false })\n\n    // If the start and end keys are the same, we're done.\n    if (startKey == endKey) return\n\n    // If there is no next text node, we're done.\n    if (!nextText) return\n\n    // Continue...\n    document = change.value.document\n    startKey = nextText.key\n    startOffset = 0\n    isStartVoid = document.hasVoidParent(startKey)\n  }\n\n  // If the end node is inside a void node, do the same thing but backwards. But\n  // we don't need any aborting checks because if we've gotten this far there\n  // must be a non-void node that will exit the loop.\n  while (isEndVoid) {\n    const endVoid = document.getClosestVoid(endKey)\n    const prevText = document.getPreviousText(endKey)\n    change.removeNodeByKey(endVoid.key, { normalize: false })\n\n    // Continue...\n    document = change.value.document\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey)\n  }\n\n  // If the start and end key are the same, and it was a hanging selection, we\n  // can just remove the entire block.\n  if (startKey == endKey && isHanging) {\n    change.removeNodeByKey(startBlock.key, { normalize })\n    return\n  } else if (startKey == endKey) {\n    // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n    // simply remove the text in the range.\n    const index = startOffset\n    const length = endOffset - startOffset\n    change.removeTextByKey(startKey, index, length, { normalize })\n    return\n  } else {\n    // Otherwise, we need to recursively remove text and nodes inside the start\n    // block after the start offset and inside the end block before the end\n    // offset. Then remove any blocks that are in between the start and end\n    // blocks. Then finally merge the start and end nodes.\n    startBlock = document.getClosestBlock(startKey)\n    endBlock = document.getClosestBlock(endKey)\n    const startText = document.getNode(startKey)\n    const endText = document.getNode(endKey)\n    const startLength = startText.text.length - startOffset\n    const endLength = endOffset\n\n    const ancestor = document.getCommonAncestor(startKey, endKey)\n    const startChild = ancestor.getFurthestAncestor(startKey)\n    const endChild = ancestor.getFurthestAncestor(endKey)\n\n    const startParent = document.getParent(startBlock.key)\n    const startParentIndex = startParent.nodes.indexOf(startBlock)\n    const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n    let child\n\n    // Iterate through all of the nodes in the tree after the start text node\n    // but inside the end child, and remove them.\n    child = startText\n\n    while (child.key != startChild.key) {\n      const parent = document.getParent(child.key)\n      const index = parent.nodes.indexOf(child)\n      const afters = parent.nodes.slice(index + 1)\n\n      afters.reverse().forEach(node => {\n        change.removeNodeByKey(node.key, { normalize: false })\n      })\n\n      child = parent\n    }\n\n    // Remove all of the middle children.\n    const startChildIndex = ancestor.nodes.indexOf(startChild)\n    const endChildIndex = ancestor.nodes.indexOf(endChild)\n    const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n    middles.reverse().forEach(node => {\n      change.removeNodeByKey(node.key, { normalize: false })\n    })\n\n    // Remove the nodes before the end text node in the tree.\n    child = endText\n\n    while (child.key != endChild.key) {\n      const parent = document.getParent(child.key)\n      const index = parent.nodes.indexOf(child)\n      const befores = parent.nodes.slice(0, index)\n\n      befores.reverse().forEach(node => {\n        change.removeNodeByKey(node.key, { normalize: false })\n      })\n\n      child = parent\n    }\n\n    // Remove any overlapping text content from the leaf text nodes.\n    if (startLength != 0) {\n      change.removeTextByKey(startKey, startOffset, startLength, {\n        normalize: false,\n      })\n    }\n\n    if (endLength != 0) {\n      change.removeTextByKey(endKey, 0, endOffset, { normalize: false })\n    }\n\n    // If the start and end blocks aren't the same, move and merge the end block\n    // into the start block.\n    if (startBlock.key != endBlock.key) {\n      document = change.value.document\n      const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n      // Move the end block to be right after the start block.\n      if (endParentIndex != startParentIndex + 1) {\n        change.moveNodeByKey(\n          endBlock.key,\n          startParent.key,\n          startParentIndex + 1,\n          { normalize: false }\n        )\n      }\n\n      // If the selection is hanging, just remove the start block, otherwise\n      // merge the end block into it.\n      if (isHanging) {\n        change.removeNodeByKey(startBlock.key, { normalize: false })\n      } else {\n        change.mergeNodeByKey(endBlock.key, { normalize: false })\n      }\n\n      // If nested empty blocks are left over above the end block, remove them.\n      if (lonely) {\n        change.removeNodeByKey(lonely.key, { normalize: false })\n      }\n    }\n\n    // If we should normalize, do it now after everything.\n    if (normalize) {\n      change.normalizeNodeByKey(ancestor.key)\n    }\n  }\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteCharBackwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getCharOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n, options)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteLineBackwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  change.deleteBackwardAtRange(range, o, options)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteWordBackwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getWordOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n, options)\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteBackwardAtRange = (change, range, n = 1, options = {}) => {\n  if (n === 0) return\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const { startKey, focusOffset } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  const voidParent = document.getClosestVoid(startKey)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key, { normalize })\n    return\n  }\n\n  const block = document.getClosestBlock(startKey)\n\n  // If the closest is not void, but empty, remove it\n  if (block && block.isEmpty && document.nodes.size !== 1) {\n    change.removeNodeByKey(block.key, { normalize })\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (range.isAtStartOf(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(startKey)\n\n  if (range.isAtStartOf(text)) {\n    const prev = document.getPreviousText(text.key)\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      change.removeNodeByKey(prevVoid.key, { normalize })\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && prevBlock != block) {\n      range = range.merge({\n        anchorKey: prev.key,\n        anchorOffset: prev.text.length,\n      })\n\n      change.deleteAtRange(range, { normalize })\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focusOffset) {\n    range = range.merge({\n      focusOffset: focusOffset - n,\n      isBackward: true,\n    })\n\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focusOffset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.merge({\n    focusKey: node.key,\n    focusOffset: offset,\n    isBackward: true,\n  })\n\n  change.deleteAtRange(range, { normalize })\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteCharForwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getCharOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n, options)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteLineForwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  change.deleteForwardAtRange(range, startBlock.text.length - o, options)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteWordForwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getWordOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n, options)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteForwardAtRange = (change, range, n = 1, options = {}) => {\n  if (n === 0) return\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const { startKey, focusOffset } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  const voidParent = document.getClosestVoid(startKey)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key, { normalize })\n    return\n  }\n\n  const block = document.getClosestBlock(startKey)\n\n  // If the closest is not void, but empty, remove it\n  if (block && block.isEmpty && document.nodes.size !== 1) {\n    const nextBlock = document.getNextBlock(block.key)\n    change.removeNodeByKey(block.key, { normalize })\n\n    if (nextBlock && nextBlock.key) {\n      change.moveToStartOf(nextBlock)\n    }\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (range.isAtEndOf(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(startKey)\n\n  if (range.isAtEndOf(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      change.removeNodeByKey(nextVoid.key, { normalize })\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && nextBlock != block) {\n      range = range.merge({\n        focusKey: next.key,\n        focusOffset: 0,\n      })\n\n      change.deleteAtRange(range, { normalize })\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focusOffset) {\n    range = range.merge({\n      focusOffset: focusOffset + n,\n    })\n\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focusOffset\n  let traversed = text.text.length - focusOffset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  // If the focus node is inside a void, go up until right before it.\n  if (document.hasVoidParent(node.key)) {\n    const parent = document.getClosestVoid(node.key)\n    node = document.getPreviousText(parent.key)\n    offset = node.text.length\n  }\n\n  range = range.merge({\n    focusKey: node.key,\n    focusOffset: offset,\n  })\n\n  change.deleteAtRange(range, { normalize })\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|String|Object} block\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertBlockAtRange = (change, range, block, options = {}) => {\n  block = Block.create(block)\n  const normalize = change.getFlag('normalize', options)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    range = range.collapseToStart()\n  }\n\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (startBlock.isVoid) {\n    const extra = range.isAtEndOf(startBlock) ? 1 : 0\n    change.insertNodeByKey(parent.key, index + extra, block, { normalize })\n  } else if (startBlock.isEmpty) {\n    change.insertNodeByKey(parent.key, index + 1, block, { normalize })\n  } else if (range.isAtStartOf(startBlock)) {\n    change.insertNodeByKey(parent.key, index, block, { normalize })\n  } else if (range.isAtEndOf(startBlock)) {\n    change.insertNodeByKey(parent.key, index + 1, block, { normalize })\n  } else {\n    change.splitDescendantsByKey(startBlock.key, startKey, startOffset, {\n      normalize: false,\n    })\n\n    change.insertNodeByKey(parent.key, index + 1, block, { normalize })\n  }\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Document} fragment\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertFragmentAtRange = (change, range, fragment, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  // If the range is expanded, delete it first.\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize: false })\n\n    if (change.value.document.getDescendant(range.startKey)) {\n      range = range.collapseToStart()\n    } else {\n      range = range.collapseTo(range.endKey, 0)\n    }\n  }\n\n  // If the fragment is empty, there's nothing to do after deleting.\n  if (!fragment.nodes.size) return\n\n  // Regenerate the keys for all of the fragments nodes, so that they're\n  // guaranteed not to collide with the existing keys in the document. Otherwise\n  // they will be rengerated automatically and we won't have an easy way to\n  // reference them.\n  fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n  // Calculate a few things...\n  const { startKey, startOffset } = range\n  const { value } = change\n  let { document } = value\n  let startText = document.getDescendant(startKey)\n  let startBlock = document.getClosestBlock(startText.key)\n  let startChild = startBlock.getFurthestAncestor(startText.key)\n  const isAtStart = range.isAtStartOf(startBlock)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n  const blocks = fragment.getBlocks()\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const firstBlock = blocks.first()\n  const lastBlock = blocks.last()\n\n  // If the fragment only contains a void block, use `insertBlock` instead.\n  if (firstBlock == lastBlock && firstBlock.isVoid) {\n    change.insertBlockAtRange(range, firstBlock, options)\n    return\n  }\n\n  // If the fragment starts or ends with single nested block, (e.g., table),\n  // do not merge this fragment with existing blocks.\n  if (fragment.hasBlocks(firstChild.key) || fragment.hasBlocks(lastChild.key)) {\n    fragment.nodes.reverse().forEach(node => {\n      change.insertBlockAtRange(range, node, options)\n    })\n    return\n  }\n\n  // If the first and last block aren't the same, we need to insert all of the\n  // nodes after the fragment's first block at the index.\n  if (firstBlock != lastBlock) {\n    const lonelyParent = fragment.getFurthest(\n      firstBlock.key,\n      p => p.nodes.size == 1\n    )\n    const lonelyChild = lonelyParent || firstBlock\n    const startIndex = parent.nodes.indexOf(startBlock)\n    fragment = fragment.removeDescendant(lonelyChild.key)\n\n    fragment.nodes.forEach((node, i) => {\n      const newIndex = startIndex + i + 1\n      change.insertNodeByKey(parent.key, newIndex, node, { normalize: false })\n    })\n  }\n\n  // Check if we need to split the node.\n  if (startOffset != 0) {\n    change.splitDescendantsByKey(startChild.key, startKey, startOffset, {\n      normalize: false,\n    })\n  }\n\n  // Update our variables with the new value.\n  document = change.value.document\n  startText = document.getDescendant(startKey)\n  startBlock = document.getClosestBlock(startKey)\n  startChild = startBlock.getFurthestAncestor(startText.key)\n\n  // If the first and last block aren't the same, we need to move any of the\n  // starting block's children after the split into the last block of the\n  // fragment, which has already been inserted.\n  if (firstBlock != lastBlock) {\n    const nextChild = isAtStart\n      ? startChild\n      : startBlock.getNextSibling(startChild.key)\n    const nextNodes = nextChild\n      ? startBlock.nodes.skipUntil(n => n.key == nextChild.key)\n      : List()\n    const lastIndex = lastBlock.nodes.size\n\n    nextNodes.forEach((node, i) => {\n      const newIndex = lastIndex + i\n\n      change.moveNodeByKey(node.key, lastBlock.key, newIndex, {\n        normalize: false,\n      })\n    })\n  }\n\n  // If the starting block is empty, we replace it entirely with the first block\n  // of the fragment, since this leads to a more expected behavior for the user.\n  if (startBlock.isEmpty) {\n    change.removeNodeByKey(startBlock.key, { normalize: false })\n    change.insertNodeByKey(parent.key, index, firstBlock, { normalize: false })\n  } else {\n    // Otherwise, we maintain the starting block, and insert all of the first\n    // block's inline nodes into it at the split point.\n    const inlineChild = startBlock.getFurthestAncestor(startText.key)\n    const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n    firstBlock.nodes.forEach((inline, i) => {\n      const o = startOffset == 0 ? 0 : 1\n      const newIndex = inlineIndex + i + o\n\n      change.insertNodeByKey(startBlock.key, newIndex, inline, {\n        normalize: false,\n      })\n    })\n  }\n\n  // Normalize if requested.\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|String|Object} inline\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertInlineAtRange = (change, range, inline, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  inline = Inline.create(inline)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize: false })\n    range = range.collapseToStart()\n  }\n\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const parent = document.getParent(startKey)\n  const startText = document.assertDescendant(startKey)\n  const index = parent.nodes.indexOf(startText)\n\n  if (parent.isVoid) return\n\n  change.splitNodeByKey(startKey, startOffset, { normalize: false })\n  change.insertNodeByKey(parent.key, index + 1, inline, { normalize: false })\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertTextAtRange = (change, range, text, marks, options = {}) => {\n  let { normalize } = options\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  let key = startKey\n  let offset = startOffset\n  const parent = document.getParent(startKey)\n\n  if (parent.isVoid) return\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize: false })\n\n    // Update range start after delete\n    if (change.value.startKey !== key) {\n      key = change.value.startKey\n      offset = change.value.startOffset\n    }\n  }\n\n  // PERF: Unless specified, don't normalize if only inserting text.\n  if (normalize === undefined) {\n    normalize = range.isExpanded && marks.size !== 0\n  }\n\n  change.insertTextByKey(key, offset, text, marks, { normalize: false })\n\n  if (normalize) {\n    // normalize in the narrowest existing block that originally contains startKey and endKey\n    const commonAncestor = document.getCommonAncestor(startKey, range.endKey)\n    const ancestors = document\n      .getAncestors(commonAncestor.key)\n      .push(commonAncestor)\n    const normalizeAncestor = ancestors.findLast(n =>\n      change.value.document.getDescendant(n.key)\n    )\n    // it is possible that normalizeAncestor doesn't return any node\n    // on that case fallback to startKey to be normalized\n    const normalizeKey = normalizeAncestor ? normalizeAncestor.key : startKey\n    change.normalizeNodeByKey(normalizeKey)\n  }\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeMarkAtRange = (change, range, mark, options = {}) => {\n  if (range.isCollapsed) return\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { startKey, startOffset, endKey, endOffset } = range\n\n  texts.forEach(node => {\n    const { key } = node\n    let index = 0\n    let length = node.text.length\n\n    if (key == startKey) index = startOffset\n    if (key == endKey) length = endOffset\n    if (key == startKey && key == endKey) length = endOffset - startOffset\n\n    change.removeMarkByKey(key, index, length, mark, { normalize })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setBlocksAtRange = (change, range, properties, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const blocks = document.getBlocksAtRange(range)\n\n  const { startKey, startOffset, endKey, endOffset, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(startKey)\n  const startBlock = document.getClosestBlock(startKey)\n  const endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed == false &&\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  sets.forEach(block => {\n    change.setNodeByKey(block.key, properties, { normalize })\n  })\n}\n\nChanges.setBlockAtRange = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setBlockAtRange` method of Slate changes has been renamed to `setBlocksAtRange`.'\n  )\n\n  Changes.setBlocksAtRange(...args)\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setInlinesAtRange = (change, range, properties, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const inlines = document.getInlinesAtRange(range)\n\n  inlines.forEach(inline => {\n    change.setNodeByKey(inline.key, properties, { normalize })\n  })\n}\n\nChanges.setInlineAtRange = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setInlineAtRange` method of Slate changes has been renamed to `setInlinesAtRange`.'\n  )\n\n  Changes.setInlinesAtRange(...args)\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitBlockAtRange = (change, range, height = 1, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  const { startKey, startOffset, endOffset, endKey } = range\n  const { value } = change\n  const { document } = value\n  let node = document.assertDescendant(startKey)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  change.splitDescendantsByKey(node.key, startKey, startOffset, {\n    normalize: normalize && range.isCollapsed,\n  })\n\n  if (range.isExpanded) {\n    if (range.isBackward) range = range.flip()\n    const nextBlock = change.value.document.getNextBlock(node.key)\n    range = range.moveAnchorToStartOf(nextBlock)\n\n    if (startKey === endKey) {\n      range = range.moveFocusTo(range.anchorKey, endOffset - startOffset)\n    }\n\n    change.deleteAtRange(range, { normalize })\n  }\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitInlineAtRange = (\n  change,\n  range,\n  height = Infinity,\n  options = {}\n) => {\n  const normalize = change.getFlag('normalize', options)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    range = range.collapseToStart()\n  }\n\n  const { startKey, startOffset } = range\n  const { value } = change\n  const { document } = value\n  let node = document.assertDescendant(startKey)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  change.splitDescendantsByKey(node.key, startKey, startOffset, { normalize })\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.toggleMarkAtRange = (change, range, mark, options = {}) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    change.removeMarkAtRange(range, mark, { normalize })\n  } else {\n    change.addMarkAtRange(range, mark, { normalize })\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapBlockAtRange = (change, range, properties, options = {}) => {\n  properties = Node.createProperties(properties)\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  let { document } = value\n  const blocks = document.getBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object != 'block') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.isVoid != null && parent.isVoid != properties.isVoid)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  wrappers.forEach(block => {\n    const first = block.nodes.first()\n    const last = block.nodes.last()\n    const parent = document.getParent(block.key)\n    const index = parent.nodes.indexOf(block)\n\n    const children = block.nodes.filter(child => {\n      return blocks.some(b => child == b || child.hasDescendant(b.key))\n    })\n\n    const firstMatch = children.first()\n    const lastMatch = children.last()\n\n    if (first == firstMatch && last == lastMatch) {\n      block.nodes.forEach((child, i) => {\n        change.moveNodeByKey(child.key, parent.key, index + i, {\n          normalize: false,\n        })\n      })\n\n      change.removeNodeByKey(block.key, { normalize: false })\n    } else if (last == lastMatch) {\n      block.nodes.skipUntil(n => n == firstMatch).forEach((child, i) => {\n        change.moveNodeByKey(child.key, parent.key, index + 1 + i, {\n          normalize: false,\n        })\n      })\n    } else if (first == firstMatch) {\n      block.nodes\n        .takeUntil(n => n == lastMatch)\n        .push(lastMatch)\n        .forEach((child, i) => {\n          change.moveNodeByKey(child.key, parent.key, index + i, {\n            normalize: false,\n          })\n        })\n    } else {\n      const firstText = firstMatch.getFirstText()\n\n      change.splitDescendantsByKey(block.key, firstText.key, 0, {\n        normalize: false,\n      })\n\n      document = change.value.document\n\n      children.forEach((child, i) => {\n        if (i == 0) {\n          const extra = child\n          child = document.getNextBlock(child.key)\n          change.removeNodeByKey(extra.key, { normalize: false })\n        }\n\n        change.moveNodeByKey(child.key, parent.key, index + 1 + i, {\n          normalize: false,\n        })\n      })\n    }\n  })\n\n  // TODO: optmize to only normalize the right block\n  if (normalize) {\n    change.normalizeDocument()\n  }\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapInlineAtRange = (change, range, properties, options = {}) => {\n  properties = Node.createProperties(properties)\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object != 'inline') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.isVoid != null && parent.isVoid != properties.isVoid)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  inlines.forEach(inline => {\n    const parent = change.value.document.getParent(inline.key)\n    const index = parent.nodes.indexOf(inline)\n\n    inline.nodes.forEach((child, i) => {\n      change.moveNodeByKey(child.key, parent.key, index + i, {\n        normalize: false,\n      })\n    })\n  })\n\n  // TODO: optmize to only normalize the right block\n  if (normalize) {\n    change.normalizeDocument()\n  }\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|Object|String} block\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapBlockAtRange = (change, range, block, options = {}) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n\n  const blocks = document.getBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 == p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node == firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node == lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  // Inject the new block node into the parent.\n  change.insertNodeByKey(parent.key, index, block, { normalize: false })\n\n  // Move the sibling nodes into the new block node.\n  siblings.forEach((node, i) => {\n    change.moveNodeByKey(node.key, block.key, i, { normalize: false })\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|Object|String} inline\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapInlineAtRange = (change, range, inline, options = {}) => {\n  const { value } = change\n  let { document } = value\n  const normalize = change.getFlag('normalize', options)\n  const { startKey, startOffset, endKey, endOffset } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(startKey)\n\n    if (!inlineParent.isVoid) {\n      return\n    }\n\n    return change.wrapInlineByKey(inlineParent.key, inline, options)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n  let startChild = startBlock.getFurthestAncestor(startKey)\n  let endChild = endBlock.getFurthestAncestor(endKey)\n\n  change.splitDescendantsByKey(endChild.key, endKey, endOffset, {\n    normalize: false,\n  })\n\n  change.splitDescendantsByKey(startChild.key, startKey, startOffset, {\n    normalize: false,\n  })\n\n  document = change.value.document\n  startBlock = document.getDescendant(startBlock.key)\n  endBlock = document.getDescendant(endBlock.key)\n  startChild = startBlock.getFurthestAncestor(startKey)\n  endChild = endBlock.getFurthestAncestor(endKey)\n  const startIndex = startBlock.nodes.indexOf(startChild)\n  const endIndex = endBlock.nodes.indexOf(endChild)\n\n  if (startBlock == endBlock) {\n    document = change.value.document\n    startBlock = document.getClosestBlock(startKey)\n    startChild = startBlock.getFurthestAncestor(startKey)\n\n    const startInner = document.getNextSibling(startChild.key)\n    const startInnerIndex = startBlock.nodes.indexOf(startInner)\n    const endInner =\n      startKey == endKey ? startInner : startBlock.getFurthestAncestor(endKey)\n    const inlines = startBlock.nodes\n      .skipUntil(n => n == startInner)\n      .takeUntil(n => n == endInner)\n      .push(endInner)\n\n    const node = inline.regenerateKey()\n\n    change.insertNodeByKey(startBlock.key, startInnerIndex, node, {\n      normalize: false,\n    })\n\n    inlines.forEach((child, i) => {\n      change.moveNodeByKey(child.key, node.key, i, { normalize: false })\n    })\n\n    if (normalize) {\n      change.normalizeNodeByKey(startBlock.key)\n    }\n  } else {\n    const startInlines = startBlock.nodes.slice(startIndex + 1)\n    const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n    const startNode = inline.regenerateKey()\n    const endNode = inline.regenerateKey()\n\n    change.insertNodeByKey(startBlock.key, startIndex + 1, startNode, {\n      normalize: false,\n    })\n\n    change.insertNodeByKey(endBlock.key, endIndex, endNode, {\n      normalize: false,\n    })\n\n    startInlines.forEach((child, i) => {\n      change.moveNodeByKey(child.key, startNode.key, i, { normalize: false })\n    })\n\n    endInlines.forEach((child, i) => {\n      change.moveNodeByKey(child.key, endNode.key, i, { normalize: false })\n    })\n\n    if (normalize) {\n      change.normalizeNodeByKey(startBlock.key).normalizeNodeByKey(endBlock.key)\n    }\n\n    blocks.slice(1, -1).forEach(block => {\n      const node = inline.regenerateKey()\n      change.insertNodeByKey(block.key, 0, node, { normalize: false })\n\n      block.nodes.forEach((child, i) => {\n        change.moveNodeByKey(child.key, node.key, i, { normalize: false })\n      })\n\n      if (normalize) {\n        change.normalizeNodeByKey(block.key)\n      }\n    })\n  }\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapTextAtRange = (\n  change,\n  range,\n  prefix,\n  suffix = prefix,\n  options = {}\n) => {\n  const normalize = change.getFlag('normalize', options)\n  const { startKey, endKey } = range\n  const start = range.collapseToStart()\n  let end = range.collapseToEnd()\n\n  if (startKey == endKey) {\n    end = end.move(prefix.length)\n  }\n\n  change.insertTextAtRange(start, prefix, [], { normalize })\n  change.insertTextAtRange(end, suffix, [], { normalize })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Range from '../models/range'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.addMarkByKey = (change, key, offset, length, mark, options = {}) => {\n  mark = Mark.create(mark)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} index\n * @param {Fragment} fragment\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertFragmentByKey = (change, key, index, fragment, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  fragment.nodes.forEach((node, i) => {\n    change.insertNodeByKey(key, index + i, node)\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(key)\n  }\n}\n\n/**\n * Insert a `node` at `index` in a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} index\n * @param {Node} node\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertNodeByKey = (change, key, index, node, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n\n  change.applyOperation({\n    type: 'insert_node',\n    value,\n    path: [...path, index],\n    node,\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(key)\n  }\n}\n\n/**\n * Insert `text` at `offset` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertTextByKey = (change, key, offset, text, marks, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  change.applyOperation({\n    type: 'insert_text',\n    value,\n    path,\n    offset,\n    text,\n    marks,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Merge a node by `key` with the previous node.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.mergeNodeByKey = (change, key, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const original = document.getDescendant(key)\n  const previous = document.getPreviousSibling(key)\n\n  if (!previous) {\n    throw new Error(`Unable to merge node with key \"${key}\", no previous key.`)\n  }\n\n  const position =\n    previous.object == 'text' ? previous.text.length : previous.nodes.size\n\n  change.applyOperation({\n    type: 'merge_node',\n    value,\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Move a node by `key` to a new parent by `newKey` and `index`.\n * `newKey` is the key of the container (it can be the document itself)\n *\n * @param {Change} change\n * @param {String} key\n * @param {String} newKey\n * @param {Number} index\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.moveNodeByKey = (change, key, newKey, newIndex, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const newPath = document.getPath(newKey)\n\n  change.applyOperation({\n    type: 'move_node',\n    value,\n    path,\n    newPath: [...newPath, newIndex],\n  })\n\n  if (normalize) {\n    const parent = document.getCommonAncestor(key, newKey)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeMarkByKey = (change, key, offset, length, mark, options = {}) => {\n  mark = Mark.create(mark)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Remove all `marks` from node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeAllMarksByKey = (change, key, options = {}) => {\n  const { state } = change\n  const { document } = state\n  const node = document.getNode(key)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      change.removeMarkByKey(text.key, 0, text.text.length, mark, options)\n    })\n  })\n}\n\n/**\n * Remove a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeNodeByKey = (change, key, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n\n  change.applyOperation({\n    type: 'remove_node',\n    value,\n    path,\n    node,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert `text` at `offset` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setTextByKey = (change, key, text, marks, options = {}) => {\n  const textNode = change.value.document.getDescendant(key)\n  change.replaceTextByKey(key, 0, textNode.text.length, text, marks, options)\n}\n\n/**\n * Replace A Length of Text with another string or text\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n *\n */\n\nChanges.replaceTextByKey = (\n  change,\n  key,\n  offset,\n  length,\n  text,\n  marks,\n  options\n) => {\n  const { document } = change.value\n  const textNode = document.getDescendant(key)\n\n  if (length + offset > textNode.text.length) {\n    length = textNode.text.length - offset\n  }\n\n  const range = Range.create({\n    anchorKey: key,\n    focusKey: key,\n    anchorOffset: offset,\n    focusOffset: offset + length,\n  })\n  let activeMarks = document.getActiveMarksAtRange(range)\n\n  change.removeTextByKey(key, offset, length, { normalize: false })\n\n  if (!marks) {\n    // Do not use mark at index when marks and activeMarks are both empty\n    marks = activeMarks ? activeMarks : []\n  } else if (activeMarks) {\n    // Do not use `has` because we may want to reset marks like font-size with an updated data;\n    activeMarks = activeMarks.filter(\n      activeMark => !marks.find(m => activeMark.type === m.type)\n    )\n\n    marks = activeMarks.merge(marks)\n  }\n\n  change.insertTextByKey(key, offset, text, marks, options)\n}\n\n/**\n * Remove text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeTextByKey = (change, key, offset, length, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      value,\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  change.applyOperations(removals.reverse())\n\n  if (normalize) {\n    const block = document.getClosestBlock(key)\n    change.normalizeNodeByKey(block.key)\n  }\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|Node} node\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.replaceNodeByKey = (change, key, newNode, options = {}) => {\n  newNode = Node.create(newNode)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const node = document.getNode(key)\n  const parent = document.getParent(key)\n  const index = parent.nodes.indexOf(node)\n  change.removeNodeByKey(key, { normalize: false })\n  change.insertNodeByKey(parent.key, index, newNode, { normalize: false })\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Set `properties` on mark on text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setMarkByKey = (\n  change,\n  key,\n  offset,\n  length,\n  mark,\n  properties,\n  options = {}\n) => {\n  mark = Mark.create(mark)\n  properties = Mark.createProperties(properties)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n\n  change.applyOperation({\n    type: 'set_mark',\n    value,\n    path,\n    offset,\n    length,\n    mark,\n    properties,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Set `properties` on a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setNodeByKey = (change, key, properties, options = {}) => {\n  properties = Node.createProperties(properties)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n\n  change.applyOperation({\n    type: 'set_node',\n    value,\n    path,\n    node,\n    properties,\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(node.key)\n  }\n}\n\n/**\n * Split a node by `key` at `position`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} position\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitNodeByKey = (change, key, position, options = {}) => {\n  const { normalize = true, target = null } = options\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getDescendantAtPath(path)\n\n  change.applyOperation({\n    type: 'split_node',\n    value,\n    path,\n    position,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n    target,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Split a node deeply down the tree by `key`, `textKey` and `textOffset`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} position\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitDescendantsByKey = (\n  change,\n  key,\n  textKey,\n  textOffset,\n  options = {}\n) => {\n  if (key == textKey) {\n    change.splitNodeByKey(textKey, textOffset, options)\n    return\n  }\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n\n  const text = document.getNode(textKey)\n  const ancestors = document.getAncestors(textKey)\n  const nodes = ancestors\n    .skipUntil(a => a.key == key)\n    .reverse()\n    .unshift(text)\n  let previous\n  let index\n\n  nodes.forEach(node => {\n    const prevIndex = index == null ? null : index\n    index = previous ? node.nodes.indexOf(previous) + 1 : textOffset\n    previous = node\n\n    change.splitNodeByKey(node.key, index, {\n      normalize: false,\n      target: prevIndex,\n    })\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapInlineByKey = (change, key, properties, options) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertDescendant(key)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOf(first, last)\n  change.unwrapInlineAtRange(range, properties, options)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapBlockByKey = (change, key, properties, options) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertDescendant(key)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOf(first, last)\n  change.unwrapBlockAtRange(range, properties, options)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapNodeByKey = (change, key, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const parent = document.getParent(key)\n  const node = parent.getChild(key)\n\n  const index = parent.nodes.indexOf(node)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  const parentParent = document.getParent(parent.key)\n  const parentIndex = parentParent.nodes.indexOf(parent)\n\n  if (parent.nodes.size === 1) {\n    change.moveNodeByKey(key, parentParent.key, parentIndex, {\n      normalize: false,\n    })\n\n    change.removeNodeByKey(parent.key, options)\n  } else if (isFirst) {\n    // Just move the node before its parent.\n    change.moveNodeByKey(key, parentParent.key, parentIndex, options)\n  } else if (isLast) {\n    // Just move the node after its parent.\n    change.moveNodeByKey(key, parentParent.key, parentIndex + 1, options)\n  } else {\n    // Split the parent.\n    change.splitNodeByKey(parent.key, index, { normalize: false })\n\n    // Extract the node in between the splitted parent.\n    change.moveNodeByKey(key, parentParent.key, parentIndex + 1, {\n      normalize: false,\n    })\n\n    if (normalize) {\n      change.normalizeNodeByKey(parentParent.key)\n    }\n  }\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Change} change\n * @param {String} key The node to wrap\n * @param {Block|Object|String} block The wrapping block (its children are discarded)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapBlockByKey = (change, key, block, options) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { document } = change.value\n  const node = document.assertDescendant(key)\n  const parent = document.getParent(node.key)\n  const index = parent.nodes.indexOf(node)\n\n  change.insertNodeByKey(parent.key, index, block, { normalize: false })\n  change.moveNodeByKey(node.key, block.key, 0, options)\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Change} change\n * @param {String} key The node to wrap\n * @param {Block|Object|String} inline The wrapping inline (its children are discarded)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapInlineByKey = (change, key, inline, options) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const { document } = change.value\n  const node = document.assertDescendant(key)\n  const parent = document.getParent(node.key)\n  const index = parent.nodes.indexOf(node)\n\n  change.insertNodeByKey(parent.key, index, inline, { normalize: false })\n  change.moveNodeByKey(node.key, inline.key, 0, options)\n}\n\n/**\n * Wrap a node by `key` with `parent`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Node|Object} parent\n * @param {Object} options\n */\n\nChanges.wrapNodeByKey = (change, key, parent) => {\n  parent = Node.create(parent)\n  parent = parent.set('nodes', parent.nodes.clear())\n\n  if (parent.object == 'block') {\n    change.wrapBlockByKey(key, parent)\n    return\n  }\n\n  if (parent.object == 'inline') {\n    change.wrapInlineByKey(key, parent)\n    return\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","/**\n * Slate operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  insert_node: ['value', 'path', 'node'],\n  insert_text: ['value', 'path', 'offset', 'text', 'marks'],\n  merge_node: ['value', 'path', 'position', 'properties', 'target'],\n  move_node: ['value', 'path', 'newPath'],\n  remove_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  remove_node: ['value', 'path', 'node'],\n  remove_text: ['value', 'path', 'offset', 'text', 'marks'],\n  set_mark: ['value', 'path', 'offset', 'length', 'mark', 'properties'],\n  set_node: ['value', 'path', 'node', 'properties'],\n  set_selection: ['value', 'selection', 'properties'],\n  set_value: ['value', 'properties'],\n  split_node: ['value', 'path', 'position', 'properties', 'target'],\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default OPERATION_ATTRIBUTES\n","import Debug from 'debug'\nimport isEqual from 'lodash/isEqual'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Stack } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:history')\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  redos: new Stack(),\n  undos: new Stack(),\n}\n\n/**\n * History.\n *\n * @type {History}\n */\n\nclass History extends Record(DEFAULTS) {\n  /**\n   * Create a new `History` with `attrs`.\n   *\n   * @param {Object|History} attrs\n   * @return {History}\n   */\n\n  static create(attrs = {}) {\n    if (History.isHistory(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return History.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`History.create\\` only accepts objects or histories, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `History` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {History}\n   */\n\n  static fromJSON(object) {\n    const { redos = [], undos = [] } = object\n\n    const history = new History({\n      redos: new Stack(redos),\n      undos: new Stack(undos),\n    })\n\n    return history\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = History.fromJSON\n\n  /**\n   * Check if `any` is a `History`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isHistory = isType.bind(null, 'HISTORY')\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'history'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Save an `operation` into the history.\n   *\n   * @param {Object} operation\n   * @param {Object} options\n   * @return {History}\n   */\n\n  save(operation, options = {}) {\n    let history = this\n    let { undos, redos } = history\n    let { merge, skip } = options\n    const prevBatch = undos.peek()\n    const prevOperation = prevBatch && prevBatch.last()\n\n    if (skip == null) {\n      skip = shouldSkip(operation, prevOperation)\n    }\n\n    if (skip) {\n      return history\n    }\n\n    if (merge == null) {\n      merge = shouldMerge(operation, prevOperation)\n    }\n\n    debug('save', { operation, merge })\n\n    // If the `merge` flag is true, add the operation to the previous batch.\n    if (merge && prevBatch) {\n      const batch = prevBatch.push(operation)\n      undos = undos.pop()\n      undos = undos.push(batch)\n    } else {\n      // Otherwise, create a new batch with the operation.\n      const batch = new List([operation])\n      undos = undos.push(batch)\n    }\n\n    // Constrain the history to 100 entries for memory's sake.\n    if (undos.size > 100) {\n      undos = undos.take(100)\n    }\n\n    // Clear the redos and update the history.\n    redos = redos.clear()\n    history = history.set('undos', undos).set('redos', redos)\n    return history\n  }\n\n  /**\n   * Return a JSON representation of the history.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      redos: this.redos.toJSON(),\n      undos: this.undos.toJSON(),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nHistory.prototype[MODEL_TYPES.HISTORY] = true\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type == 'set_selection' && p.type == 'set_selection') ||\n    (o.type == 'insert_text' &&\n      p.type == 'insert_text' &&\n      o.offset == p.offset + p.text.length &&\n      isEqual(o.path, p.path)) ||\n    (o.type == 'remove_text' &&\n      p.type == 'remove_text' &&\n      o.offset + o.text.length == p.offset &&\n      isEqual(o.path, p.path))\n\n  return merge\n}\n\n/**\n * Check whether to skip a new operation `o`, given previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldSkip(o, p) {\n  if (!p) return false\n\n  const skip = o.type == 'set_selection' && p.type == 'set_selection'\n\n  return skip\n}\n\n/**\n * Export.\n *\n * @type {History}\n */\n\nexport default History\n","import { List } from 'immutable'\n\nimport Text from '../models/text'\n\n/**\n * Define the core schema rules, order-sensitive.\n *\n * @type {Array}\n */\n\nconst CORE_SCHEMA_RULES = [\n  /**\n   * Only allow block nodes in documents.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'document') return\n      const invalids = node.nodes.filter(n => n.object != 'block')\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Only allow block nodes or inline and text nodes in blocks.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block') return\n      const first = node.nodes.first()\n      if (!first) return\n      const objects = first.object == 'block' ? ['block'] : ['inline', 'text']\n      const invalids = node.nodes.filter(n => !objects.includes(n.object))\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Only allow inline and text nodes in inlines.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'inline') return\n      const invalids = node.nodes.filter(\n        n => n.object != 'inline' && n.object != 'text'\n      )\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Ensure that block and inline nodes have at least one text child.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n      if (node.nodes.size > 0) return\n\n      return change => {\n        const text = Text.create()\n        change.insertNodeByKey(node.key, 0, text, { normalize: false })\n      }\n    },\n  },\n\n  /**\n   * Ensure that inline non-void nodes are never empty.\n   *\n   * This rule is applied to all blocks and inlines, because when they contain an empty\n   * inline, we need to remove the empty inline from that parent node. If `validate`\n   * was to be memoized, it should be against the parent node, not the empty inline itself.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'inline' && node.object != 'block') return\n\n      const invalids = node.nodes.filter(\n        child => child.object === 'inline' && child.isEmpty\n      )\n\n      if (!invalids.size) return\n\n      return change => {\n        // If all of the block's nodes are invalid, insert an empty text node so\n        // that the selection will be preserved when they are all removed.\n        if (node.nodes.size == invalids.size) {\n          const text = Text.create()\n          change.insertNodeByKey(node.key, 1, text, { normalize: false })\n        }\n\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Ensure that inline void nodes are surrounded by text nodes, by adding extra\n   * blank text nodes if necessary.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n\n      const invalids = node.nodes.reduce((list, child, index) => {\n        if (child.object !== 'inline') return list\n\n        const prev = index > 0 ? node.nodes.get(index - 1) : null\n        const next = node.nodes.get(index + 1)\n\n        // We don't test if \"prev\" is inline, since it has already been\n        // processed in the loop\n        const insertBefore = !prev\n        const insertAfter = !next || next.object == 'inline'\n\n        if (insertAfter || insertBefore) {\n          list = list.push({ insertAfter, insertBefore, index })\n        }\n\n        return list\n      }, new List())\n\n      if (!invalids.size) return\n\n      return change => {\n        // Shift for every text node inserted previously.\n        let shift = 0\n\n        invalids.forEach(({ index, insertAfter, insertBefore }) => {\n          if (insertBefore) {\n            change.insertNodeByKey(node.key, shift + index, Text.create(), {\n              normalize: false,\n            })\n\n            shift++\n          }\n\n          if (insertAfter) {\n            change.insertNodeByKey(node.key, shift + index + 1, Text.create(), {\n              normalize: false,\n            })\n\n            shift++\n          }\n        })\n      }\n    },\n  },\n\n  /**\n   * Merge adjacent text nodes.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n\n      const invalids = node.nodes\n        .map((child, i) => {\n          const next = node.nodes.get(i + 1)\n          if (child.object != 'text') return\n          if (!next || next.object != 'text') return\n          return next\n        })\n        .filter(Boolean)\n\n      if (!invalids.size) return\n\n      return change => {\n        // Reverse the list to handle consecutive merges, since the earlier nodes\n        // will always exist after each merge.\n        invalids.reverse().forEach(n => {\n          change.mergeNodeByKey(n.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Prevent extra empty text nodes, except when adjacent to inline void nodes.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n      const { nodes } = node\n      if (nodes.size <= 1) return\n\n      const invalids = nodes.filter((desc, i) => {\n        if (desc.object != 'text') return\n        if (desc.text.length > 0) return\n\n        const prev = i > 0 ? nodes.get(i - 1) : null\n        const next = nodes.get(i + 1)\n\n        // If it's the first node, and the next is a void, preserve it.\n        if (!prev && next.object == 'inline') return\n\n        // It it's the last node, and the previous is an inline, preserve it.\n        if (!next && prev.object == 'inline') return\n\n        // If it's surrounded by inlines, preserve it.\n        if (next && prev && next.object == 'inline' && prev.object == 'inline')\n          return\n\n        // Otherwise, remove it.\n        return true\n      })\n\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(text => {\n          change.removeNodeByKey(text.key, { normalize: false })\n        })\n      }\n    },\n  },\n]\n\n/**\n * Export.\n *\n * @type {Array}\n */\n\nexport default CORE_SCHEMA_RULES\n","import logger from 'slate-dev-logger'\nimport { Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  plugins: [],\n}\n\n/**\n * Stack.\n *\n * @type {Stack}\n */\n\nclass Stack extends Record(DEFAULTS) {\n  /**\n   * Constructor.\n   *\n   * @param {Object} attrs\n   */\n\n  static create(attrs = {}) {\n    const { plugins = [] } = attrs\n    const stack = new Stack({ plugins })\n    return stack\n  }\n\n  /**\n   * Check if `any` is a `Stack`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isStack(any) {\n    return !!(any && any[MODEL_TYPES.STACK])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'stack'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Get all plugins with `property`.\n   *\n   * @param {String} property\n   * @return {Array}\n   */\n\n  getPluginsWith(property) {\n    return this.plugins.filter(plugin => plugin[property] != null)\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning the first non-null value.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  find(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return ret\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning all the non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   * @return {Array}\n   */\n\n  map(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n    const array = []\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) array.push(ret)\n    }\n\n    return array\n  }\n\n  /**\n   * Iterate the plugins with `property`, breaking on any a non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  run(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, reducing to a set of React children.\n   *\n   * @param {String} property\n   * @param {Object} props\n   * @param {Any} ...args\n   */\n\n  render(property, props, ...args) {\n    const plugins = this.getPluginsWith(property)\n    return plugins.reduceRight((children, plugin) => {\n      if (!plugin[property]) return children\n      const ret = plugin[property](props, ...args)\n      if (ret == null) return children\n      props.children = ret\n      return ret\n    }, props.children === undefined ? null : props.children)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nStack.prototype[MODEL_TYPES.STACK] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Stack.prototype, ['getPluginsWith'])\n\n/**\n * Export.\n *\n * @type {Stack}\n */\n\nexport default Stack\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport mergeWith from 'lodash/mergeWith'\nimport { Record } from 'immutable'\n\nimport {\n  CHILD_OBJECT_INVALID,\n  CHILD_REQUIRED,\n  CHILD_TYPE_INVALID,\n  CHILD_UNKNOWN,\n  FIRST_CHILD_OBJECT_INVALID,\n  FIRST_CHILD_TYPE_INVALID,\n  LAST_CHILD_OBJECT_INVALID,\n  LAST_CHILD_TYPE_INVALID,\n  NODE_DATA_INVALID,\n  NODE_IS_VOID_INVALID,\n  NODE_MARK_INVALID,\n  NODE_TEXT_INVALID,\n  PARENT_INVALID,\n} from 'slate-schema-violations'\n\nimport CORE_SCHEMA_RULES from '../constants/core-schema-rules'\nimport MODEL_TYPES from '../constants/model-types'\nimport Stack from './stack'\nimport memoize from '../utils/memoize'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:schema')\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  stack: Stack.create(),\n  document: {},\n  blocks: {},\n  inlines: {},\n}\n\n/**\n * Schema.\n *\n * @type {Schema}\n */\n\nclass Schema extends Record(DEFAULTS) {\n  /**\n   * Create a new `Schema` with `attrs`.\n   *\n   * @param {Object|Schema} attrs\n   * @return {Schema}\n   */\n\n  static create(attrs = {}) {\n    if (Schema.isSchema(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Schema.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Schema.create\\` only accepts objects or schemas, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Schema` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Schema}\n   */\n\n  static fromJSON(object) {\n    if (Schema.isSchema(object)) {\n      return object\n    }\n\n    let { plugins } = object\n\n    if (object.rules) {\n      throw new Error(\n        'Schemas in Slate have changed! They are no longer accept a `rules` property.'\n      )\n    }\n\n    if (object.nodes) {\n      throw new Error(\n        'Schemas in Slate have changed! They are no longer accept a `nodes` property.'\n      )\n    }\n\n    if (!plugins) {\n      plugins = [{ schema: object }]\n    }\n\n    const schema = resolveSchema(plugins)\n    const stack = Stack.create({ plugins: [...CORE_SCHEMA_RULES, ...plugins] })\n    const ret = new Schema({ ...schema, stack })\n    return ret\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Schema.fromJSON\n\n  /**\n   * Check if `any` is a `Schema`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isSchema(any) {\n    return !!(any && any[MODEL_TYPES.SCHEMA])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'schema'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Get the rule for an `object`.\n   *\n   * @param {Mixed} object\n   * @return {Object}\n   */\n\n  getRule(object) {\n    switch (object.object) {\n      case 'document':\n        return this.document\n      case 'block':\n        return this.blocks[object.type]\n      case 'inline':\n        return this.inlines[object.type]\n    }\n  }\n\n  /**\n   * Get a dictionary of the parent rule validations by child type.\n   *\n   * @return {Object|Null}\n   */\n\n  getParentRules() {\n    const { blocks, inlines } = this\n    const parents = {}\n\n    for (const key in blocks) {\n      const rule = blocks[key]\n      if (rule.parent == null) continue\n      parents[key] = rule\n    }\n\n    for (const key in inlines) {\n      const rule = inlines[key]\n      if (rule.parent == null) continue\n      parents[key] = rule\n    }\n\n    return Object.keys(parents).length == 0 ? null : parents\n  }\n\n  /**\n   * Fail validation by returning a normalizing change function.\n   *\n   * @param {String} violation\n   * @param {Object} context\n   * @return {Function}\n   */\n\n  fail(violation, context) {\n    return change => {\n      debug(`normalizing`, { violation, context })\n      const { rule } = context\n      const { size } = change.operations\n      if (rule.normalize) rule.normalize(change, violation, context)\n      if (change.operations.size > size) return\n      this.normalize(change, violation, context)\n    }\n  }\n\n  /**\n   * Normalize an invalid value with `violation` and `context`.\n   *\n   * @param {Change} change\n   * @param {String} violation\n   * @param {Mixed} context\n   */\n\n  normalize(change, violation, context) {\n    switch (violation) {\n      case CHILD_OBJECT_INVALID:\n      case CHILD_TYPE_INVALID:\n      case CHILD_UNKNOWN:\n      case FIRST_CHILD_OBJECT_INVALID:\n      case FIRST_CHILD_TYPE_INVALID:\n      case LAST_CHILD_OBJECT_INVALID:\n      case LAST_CHILD_TYPE_INVALID: {\n        const { child, node } = context\n        return child.object == 'text' &&\n          node.object == 'block' &&\n          node.nodes.size == 1\n          ? change.removeNodeByKey(node.key)\n          : change.removeNodeByKey(child.key)\n      }\n\n      case CHILD_REQUIRED:\n      case NODE_TEXT_INVALID:\n      case PARENT_INVALID: {\n        const { node } = context\n        return node.object == 'document'\n          ? node.nodes.forEach(child => change.removeNodeByKey(child.key))\n          : change.removeNodeByKey(node.key)\n      }\n\n      case NODE_DATA_INVALID: {\n        const { node, key } = context\n        return node.data.get(key) === undefined && node.object != 'document'\n          ? change.removeNodeByKey(node.key)\n          : change.setNodeByKey(node.key, { data: node.data.delete(key) })\n      }\n\n      case NODE_IS_VOID_INVALID: {\n        const { node } = context\n        return change.setNodeByKey(node.key, { isVoid: !node.isVoid })\n      }\n\n      case NODE_MARK_INVALID: {\n        const { node, mark } = context\n        return node\n          .getTexts()\n          .forEach(t => change.removeMarkByKey(t.key, 0, t.text.length, mark))\n      }\n    }\n  }\n\n  /**\n   * Validate a `node` with the schema, returning a function that will fix the\n   * invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @return {Function|Void}\n   */\n\n  validateNode(node) {\n    const ret = this.stack.find('validateNode', node)\n    if (ret) return ret\n\n    if (node.object == 'text') return\n\n    const rule = this.getRule(node) || {}\n    const parents = this.getParentRules()\n    const ctx = { node, rule }\n\n    if (rule.isVoid != null) {\n      if (node.isVoid != rule.isVoid) {\n        return this.fail(NODE_IS_VOID_INVALID, ctx)\n      }\n    }\n\n    if (rule.data != null) {\n      for (const key in rule.data) {\n        const fn = rule.data[key]\n        const value = node.data.get(key)\n\n        if (!fn(value)) {\n          return this.fail(NODE_DATA_INVALID, { ...ctx, key, value })\n        }\n      }\n    }\n\n    if (rule.marks != null) {\n      const marks = node.getMarks().toArray()\n\n      for (const mark of marks) {\n        if (!rule.marks.some(def => def.type === mark.type)) {\n          return this.fail(NODE_MARK_INVALID, { ...ctx, mark })\n        }\n      }\n    }\n\n    if (rule.text != null) {\n      const { text } = node\n\n      if (!rule.text.test(text)) {\n        return this.fail(NODE_TEXT_INVALID, { ...ctx, text })\n      }\n    }\n\n    if (rule.first != null) {\n      const { objects, types } = rule.first\n      const child = node.nodes.first()\n\n      if (child && objects && !objects.includes(child.object)) {\n        return this.fail(FIRST_CHILD_OBJECT_INVALID, { ...ctx, child })\n      }\n\n      if (child && types && !types.includes(child.type)) {\n        return this.fail(FIRST_CHILD_TYPE_INVALID, { ...ctx, child })\n      }\n    }\n\n    if (rule.last != null) {\n      const { objects, types } = rule.last\n      const child = node.nodes.last()\n\n      if (child && objects && !objects.includes(child.object)) {\n        return this.fail(LAST_CHILD_OBJECT_INVALID, { ...ctx, child })\n      }\n\n      if (child && types && !types.includes(child.type)) {\n        return this.fail(LAST_CHILD_TYPE_INVALID, { ...ctx, child })\n      }\n    }\n\n    if (rule.nodes != null || parents != null) {\n      const children = node.nodes.toArray()\n      const defs = rule.nodes != null ? rule.nodes.slice() : []\n\n      let offset\n      let min\n      let index\n      let def\n      let max\n      let child\n\n      function nextDef() {\n        offset = offset == null ? null : 0\n        def = defs.shift()\n        min = def && (def.min == null ? 0 : def.min)\n        max = def && (def.max == null ? Infinity : def.max)\n        return !!def\n      }\n\n      function nextChild() {\n        index = index == null ? 0 : index + 1\n        offset = offset == null ? 0 : offset + 1\n        child = children[index]\n        if (max != null && offset == max) nextDef()\n        return !!child\n      }\n\n      function rewind() {\n        offset -= 1\n        index -= 1\n      }\n\n      if (rule.nodes != null) {\n        nextDef()\n      }\n\n      while (nextChild()) {\n        if (\n          parents != null &&\n          child.object != 'text' &&\n          child.type in parents\n        ) {\n          const r = parents[child.type]\n\n          // Refer to PARENT_INVALID documentation for the specification\n          const definedObjects = r.parent.objects != null\n          const definedTypes = r.parent.types != null\n\n          const allowedObject =\n            definedObjects && r.parent.objects.includes(node.object)\n          const allowedType = definedTypes && r.parent.types.includes(node.type)\n\n          const allowed =\n            (!definedObjects && !definedTypes) || allowedObject || allowedType\n\n          if (!allowed) {\n            return this.fail(PARENT_INVALID, {\n              node: child,\n              parent: node,\n              rule: r,\n            })\n          }\n        }\n\n        if (rule.nodes != null) {\n          if (!def) {\n            return this.fail(CHILD_UNKNOWN, { ...ctx, child, index })\n          }\n\n          if (def.objects != null && !def.objects.includes(child.object)) {\n            if (offset >= min && nextDef()) {\n              rewind()\n              continue\n            }\n            return this.fail(CHILD_OBJECT_INVALID, { ...ctx, child, index })\n          }\n\n          if (def.types != null && !def.types.includes(child.type)) {\n            if (offset >= min && nextDef()) {\n              rewind()\n              continue\n            }\n            return this.fail(CHILD_TYPE_INVALID, { ...ctx, child, index })\n          }\n        }\n      }\n\n      if (rule.nodes != null) {\n        while (min != null) {\n          if (offset < min) {\n            return this.fail(CHILD_REQUIRED, { ...ctx, index })\n          }\n\n          nextDef()\n        }\n      }\n    }\n  }\n\n  /**\n   * Return a JSON representation of the schema.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      document: this.document,\n      blocks: this.blocks,\n      inlines: this.inlines,\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Resolve a set of schema rules from an array of `plugins`.\n *\n * @param {Array} plugins\n * @return {Object}\n */\n\nfunction resolveSchema(plugins = []) {\n  const schema = {\n    document: {},\n    blocks: {},\n    inlines: {},\n  }\n\n  plugins\n    .slice()\n    .reverse()\n    .forEach(plugin => {\n      if (!plugin.schema) return\n\n      if (plugin.schema.rules) {\n        throw new Error(\n          'Schemas in Slate have changed! They are no longer accept a `rules` property.'\n        )\n      }\n\n      if (plugin.schema.nodes) {\n        throw new Error(\n          'Schemas in Slate have changed! They are no longer accept a `nodes` property.'\n        )\n      }\n\n      const { document = {}, blocks = {}, inlines = {} } = plugin.schema\n      const d = resolveDocumentRule(document)\n      const bs = {}\n      const is = {}\n\n      for (const key in blocks) {\n        bs[key] = resolveNodeRule('block', key, blocks[key])\n      }\n\n      for (const key in inlines) {\n        is[key] = resolveNodeRule('inline', key, inlines[key])\n      }\n\n      mergeWith(schema.document, d, customizer)\n      mergeWith(schema.blocks, bs, customizer)\n      mergeWith(schema.inlines, is, customizer)\n    })\n\n  return schema\n}\n\n/**\n * Resolve a document rule `obj`.\n *\n * @param {Object} obj\n * @return {Object}\n */\n\nfunction resolveDocumentRule(obj) {\n  return {\n    data: {},\n    nodes: null,\n    ...obj,\n  }\n}\n\n/**\n * Resolve a node rule with `type` from `obj`.\n *\n * @param {String} object\n * @param {String} type\n * @param {Object} obj\n * @return {Object}\n */\n\nfunction resolveNodeRule(object, type, obj) {\n  return {\n    data: {},\n    isVoid: null,\n    nodes: null,\n    first: null,\n    last: null,\n    parent: null,\n    text: null,\n    ...obj,\n  }\n}\n\n/**\n * A Lodash customizer for merging schema definitions. Special cases `objects`,\n * `marks` and `types` arrays to be unioned, and ignores new `null` values.\n *\n * @param {Mixed} target\n * @param {Mixed} source\n * @return {Array|Void}\n */\n\nfunction customizer(target, source, key) {\n  if (key == 'objects' || key == 'types' || key == 'marks') {\n    return target == null ? source : target.concat(source)\n  } else {\n    return source == null ? target : source\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nSchema.prototype[MODEL_TYPES.SCHEMA] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Schema.prototype, ['getParentRules'])\n\n/**\n * Export.\n *\n * @type {Schema}\n */\n\nexport default Schema\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { Record, Set, List, Map } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Change from './change'\nimport Data from './data'\nimport Document from './document'\nimport History from './history'\nimport Range from './range'\nimport Schema from './schema'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  decorations: null,\n  document: Document.create(),\n  history: History.create(),\n  schema: Schema.create(),\n  selection: Range.create(),\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs, options)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Value.isValue(attrs)) {\n      return {\n        data: attrs.data,\n        decorations: attrs.decorations,\n        schema: attrs.schema,\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      if ('decorations' in attrs)\n        props.decorations = Range.createList(attrs.decorations)\n      if ('schema' in attrs) props.schema = Schema.create(attrs.schema)\n      return props\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let { document = {}, selection = {}, schema = {} } = object\n\n    let data = new Map()\n\n    document = Document.fromJSON(document)\n    selection = Range.fromJSON(selection)\n    schema = Schema.fromJSON(schema)\n\n    // Allow plugins to set a default value for `data`.\n    if (options.plugins) {\n      for (const plugin of options.plugins) {\n        if (plugin.data) data = data.merge(plugin.data)\n      }\n    }\n\n    // Then merge in the `data` provided.\n    if ('data' in object) {\n      data = data.merge(object.data)\n    }\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.collapseToStartOf(text)\n    }\n\n    let value = new Value({\n      data,\n      document,\n      selection,\n      schema,\n    })\n\n    if (options.normalize !== false) {\n      value = value.change({ save: false }).normalize().value\n    }\n\n    return value\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Value.fromJSON\n\n  /**\n   * Check if a `value` is a `Value`.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isValue(value) {\n    return !!(value && value[MODEL_TYPES.VALUE])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'value'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Are there undoable events?\n   *\n   * @return {Boolean}\n   */\n\n  get hasUndos() {\n    return this.history.undos.size > 0\n  }\n\n  /**\n   * Are there redoable events?\n   *\n   * @return {Boolean}\n   */\n\n  get hasRedos() {\n    return this.history.redos.size > 0\n  }\n\n  /**\n   * Is the current selection blurred?\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return this.selection.isBlurred\n  }\n\n  /**\n   * Is the current selection focused?\n   *\n   * @return {Boolean}\n   */\n\n  get isFocused() {\n    return this.selection.isFocused\n  }\n\n  /**\n   * Is the current selection collapsed?\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return this.selection.isCollapsed\n  }\n\n  /**\n   * Is the current selection expanded?\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return this.selection.isExpanded\n  }\n\n  /**\n   * Is the current selection backward?\n   *\n   * @return {Boolean} isBackward\n   */\n\n  get isBackward() {\n    return this.selection.isBackward\n  }\n\n  /**\n   * Is the current selection forward?\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    return this.selection.isForward\n  }\n\n  /**\n   * Get the current start key.\n   *\n   * @return {String}\n   */\n\n  get startKey() {\n    return this.selection.startKey\n  }\n\n  /**\n   * Get the current end key.\n   *\n   * @return {String}\n   */\n\n  get endKey() {\n    return this.selection.endKey\n  }\n\n  /**\n   * Get the current start offset.\n   *\n   * @return {String}\n   */\n\n  get startOffset() {\n    return this.selection.startOffset\n  }\n\n  /**\n   * Get the current end offset.\n   *\n   * @return {String}\n   */\n\n  get endOffset() {\n    return this.selection.endOffset\n  }\n\n  /**\n   * Get the current anchor key.\n   *\n   * @return {String}\n   */\n\n  get anchorKey() {\n    return this.selection.anchorKey\n  }\n\n  /**\n   * Get the current focus key.\n   *\n   * @return {String}\n   */\n\n  get focusKey() {\n    return this.selection.focusKey\n  }\n\n  /**\n   * Get the current anchor offset.\n   *\n   * @return {String}\n   */\n\n  get anchorOffset() {\n    return this.selection.anchorOffset\n  }\n\n  /**\n   * Get the current focus offset.\n   *\n   * @return {String}\n   */\n\n  get focusOffset() {\n    return this.selection.focusOffset\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return this.startKey && this.document.getClosestBlock(this.startKey)\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return this.endKey && this.document.getClosestBlock(this.endKey)\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return this.anchorKey && this.document.getClosestBlock(this.anchorKey)\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return this.focusKey && this.document.getClosestBlock(this.focusKey)\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return this.startKey && this.document.getClosestInline(this.startKey)\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return this.endKey && this.document.getClosestInline(this.endKey)\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return this.anchorKey && this.document.getClosestInline(this.anchorKey)\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return this.focusKey && this.document.getClosestInline(this.focusKey)\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return this.startKey && this.document.getDescendant(this.startKey)\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return this.endKey && this.document.getDescendant(this.endKey)\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return this.anchorKey && this.document.getDescendant(this.anchorKey)\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return this.focusKey && this.document.getDescendant(this.focusKey)\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return this.endKey && this.document.getNextBlock(this.endKey)\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return this.startKey && this.document.getPreviousBlock(this.startKey)\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return this.endKey && this.document.getNextInline(this.endKey)\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return this.startKey && this.document.getPreviousInline(this.startKey)\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return this.endKey && this.document.getNextText(this.endKey)\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return this.startKey && this.document.getPreviousText(this.startKey)\n  }\n\n  /**\n   * Get the characters in the current selection.\n   *\n   * @return {List<Character>}\n   */\n\n  get characters() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getCharactersAtRange(this.selection)\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Check whether the selection is empty.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    if (this.isCollapsed) return true\n    if (this.endOffset != 0 && this.startOffset != 0) return false\n    return this.fragment.isEmpty\n  }\n\n  /**\n   * Check whether the selection is collapsed in a void node.\n   *\n   * @return {Boolean}\n   */\n\n  get isInVoid() {\n    if (this.isExpanded) return false\n    return this.document.hasVoidParent(this.startKey)\n  }\n\n  /**\n   * Create a new `Change` with the current value as a starting point.\n   *\n   * @param {Object} attrs\n   * @return {Change}\n   */\n\n  change(attrs = {}) {\n    return new Change({ ...attrs, value: this })\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON()\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        ? this.decorations.toArray().map(d => d.toJSON())\n        : null\n    }\n\n    if (options.preserveHistory) {\n      object.history = this.history.toJSON()\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON()\n    }\n\n    if (options.preserveSchema) {\n      object.schema = this.schema.toJSON()\n    }\n\n    if (options.preserveSelection && !options.preserveKeys) {\n      const { document, selection } = this\n\n      object.selection.anchorPath = selection.isSet\n        ? document.getPath(selection.anchorKey)\n        : null\n\n      object.selection.focusPath = selection.isSet\n        ? document.getPath(selection.focusKey)\n        : null\n\n      delete object.selection.anchorKey\n      delete object.selection.focusKey\n    }\n\n    if (\n      options.preserveDecorations &&\n      object.decorations &&\n      !options.preserveKeys\n    ) {\n      const { document } = this\n\n      object.decorations = object.decorations.map(decoration => {\n        const withPath = {\n          ...decoration,\n          anchorPath: document.getPath(decoration.anchorKey),\n          focusPath: document.getPath(decoration.focusKey),\n        }\n        delete withPath.anchorKey\n        delete withPath.focusKey\n        return withPath\n      })\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nValue.prototype[MODEL_TYPES.VALUE] = true\n\n/**\n * Export.\n */\n\nexport default Value\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport OPERATION_ATTRIBUTES from '../constants/operation-attributes'\nimport Mark from './mark'\nimport Node from './node'\nimport Range from './range'\nimport Value from './value'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  selection: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  value: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type, value } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      if (v === undefined) {\n        // Skip keys for objects that should not be serialized, and are only used\n        // for providing the local-only invert behavior for the history stack.\n        if (key == 'document') continue\n        if (key == 'selection') continue\n        if (key == 'value') continue\n        if (key == 'node' && type != 'insert_node') continue\n\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key == 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key == 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key == 'node') {\n        v = Node.create(v)\n      }\n\n      if (key == 'selection') {\n        v = Range.create(v)\n      }\n\n      if (key == 'value') {\n        v = Value.create(v)\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        v = Mark.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const { anchorKey, focusKey, ...rest } = v\n        v = Range.createProperties(rest)\n\n        if (anchorKey !== undefined) {\n          v.anchorPath =\n            anchorKey === null ? null : value.document.getPath(anchorKey)\n        }\n\n        if (focusKey !== undefined) {\n          v.focusPath =\n            focusKey === null ? null : value.document.getPath(focusKey)\n        }\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        v = Value.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Operation.fromJSON\n\n  /**\n   * Check if `any` is a `Operation`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperation(any) {\n    return !!(any && any[MODEL_TYPES.OPERATION])\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'operation'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      // Skip keys for objects that should not be serialized, and are only used\n      // for providing the local-only invert behavior for the history stack.\n      if (key == 'document') continue\n      if (key == 'selection') continue\n      if (key == 'value') continue\n      if (key == 'node' && type != 'insert_node') continue\n\n      if (key == 'mark' || key == 'marks' || key == 'node') {\n        value = value.toJSON()\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('isVoid' in value) v.isVoid = value.isVoid\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const v = {}\n        if ('anchorOffset' in value) v.anchorOffset = value.anchorOffset\n        if ('anchorPath' in value) v.anchorPath = value.anchorPath\n        if ('focusOffset' in value) v.focusOffset = value.focusOffset\n        if ('focusPath' in value) v.focusPath = value.focusPath\n        if ('isBackward' in value) v.isBackward = value.isBackward\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value)\n          v.marks = value.marks == null ? null : value.marks.toJSON()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        if ('schema' in value) v.schema = value.schema.toJS()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nOperation.prototype[MODEL_TYPES.OPERATION] = true\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import Debug from 'debug'\nimport pick from 'lodash/pick'\n\nimport Operation from '../models/operation'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  /**\n   * Insert node.\n   */\n\n  if (type == 'insert_node') {\n    const inverse = op.set('type', 'remove_node')\n    return inverse\n  }\n\n  /**\n   * Remove node.\n   */\n\n  if (type == 'remove_node') {\n    const inverse = op.set('type', 'insert_node')\n    return inverse\n  }\n\n  /**\n   * Move node.\n   */\n\n  if (type == 'move_node') {\n    const { newPath, path } = op\n    let inversePath = newPath\n    let inverseNewPath = path\n\n    const pathLast = path.length - 1\n    const newPathLast = newPath.length - 1\n\n    // If the node's old position was a left sibling of an ancestor of\n    // its new position, we need to adjust part of the path by -1.\n    if (\n      path.length < inversePath.length &&\n      path.slice(0, pathLast).every((e, i) => e == inversePath[i]) &&\n      path[pathLast] < inversePath[pathLast]\n    ) {\n      inversePath = inversePath\n        .slice(0, pathLast)\n        .concat([inversePath[pathLast] - 1])\n        .concat(inversePath.slice(pathLast + 1, inversePath.length))\n    }\n\n    // If the node's new position is an ancestor of the old position,\n    // or a left sibling of an ancestor of its old position, we need\n    // to adjust part of the path by 1.\n    if (\n      newPath.length < inverseNewPath.length &&\n      newPath.slice(0, newPathLast).every((e, i) => e == inverseNewPath[i]) &&\n      newPath[newPathLast] <= inverseNewPath[newPathLast]\n    ) {\n      inverseNewPath = inverseNewPath\n        .slice(0, newPathLast)\n        .concat([inverseNewPath[newPathLast] + 1])\n        .concat(inverseNewPath.slice(newPathLast + 1, inverseNewPath.length))\n    }\n\n    const inverse = op.set('path', inversePath).set('newPath', inverseNewPath)\n    return inverse\n  }\n\n  /**\n   * Merge node.\n   */\n\n  if (type == 'merge_node') {\n    const { path } = op\n    const { length } = path\n    const last = length - 1\n    const inversePath = path.slice(0, last).concat([path[last] - 1])\n    const inverse = op.set('type', 'split_node').set('path', inversePath)\n    return inverse\n  }\n\n  /**\n   * Split node.\n   */\n\n  if (type == 'split_node') {\n    const { path } = op\n    const { length } = path\n    const last = length - 1\n    const inversePath = path.slice(0, last).concat([path[last] + 1])\n    const inverse = op.set('type', 'merge_node').set('path', inversePath)\n    return inverse\n  }\n\n  /**\n   * Set node.\n   */\n\n  if (type == 'set_node') {\n    const { properties, node } = op\n    const inverseNode = node.merge(properties)\n    const inverseProperties = pick(node, Object.keys(properties))\n    const inverse = op\n      .set('node', inverseNode)\n      .set('properties', inverseProperties)\n    return inverse\n  }\n\n  /**\n   * Insert text.\n   */\n\n  if (type == 'insert_text') {\n    const inverse = op.set('type', 'remove_text')\n    return inverse\n  }\n\n  /**\n   * Remove text.\n   */\n\n  if (type == 'remove_text') {\n    const inverse = op.set('type', 'insert_text')\n    return inverse\n  }\n\n  /**\n   * Add mark.\n   */\n\n  if (type == 'add_mark') {\n    const inverse = op.set('type', 'remove_mark')\n    return inverse\n  }\n\n  /**\n   * Remove mark.\n   */\n\n  if (type == 'remove_mark') {\n    const inverse = op.set('type', 'add_mark')\n    return inverse\n  }\n\n  /**\n   * Set mark.\n   */\n\n  if (type == 'set_mark') {\n    const { properties, mark } = op\n    const inverseMark = mark.merge(properties)\n    const inverseProperties = pick(mark, Object.keys(properties))\n    const inverse = op\n      .set('mark', inverseMark)\n      .set('properties', inverseProperties)\n    return inverse\n  }\n\n  /**\n   * Set selection.\n   */\n\n  if (type == 'set_selection') {\n    const { properties, selection, value } = op\n    const { anchorPath, focusPath, ...props } = properties\n    const { document } = value\n\n    if (anchorPath !== undefined) {\n      props.anchorKey =\n        anchorPath === null ? null : document.assertPath(anchorPath).key\n    }\n\n    if (focusPath !== undefined) {\n      props.focusKey =\n        focusPath === null ? null : document.assertPath(focusPath).key\n    }\n\n    const inverseSelection = selection.merge(props)\n    const inverseProps = pick(selection, Object.keys(props))\n\n    if (anchorPath !== undefined) {\n      inverseProps.anchorPath =\n        inverseProps.anchorKey === null\n          ? null\n          : document.getPath(inverseProps.anchorKey)\n\n      delete inverseProps.anchorKey\n    }\n\n    if (focusPath !== undefined) {\n      inverseProps.focusPath =\n        inverseProps.focusKey === null\n          ? null\n          : document.getPath(inverseProps.focusKey)\n\n      delete inverseProps.focusKey\n    }\n\n    const inverse = op\n      .set('selection', inverseSelection)\n      .set('properties', inverseProps)\n    return inverse\n  }\n\n  /**\n   * Set value.\n   */\n\n  if (type == 'set_value') {\n    const { properties, value } = op\n    const inverseValue = value.merge(properties)\n    const inverseProperties = pick(value, Object.keys(properties))\n    const inverse = op\n      .set('value', inverseValue)\n      .set('properties', inverseProperties)\n    return inverse\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import invert from '../operations/invert'\nimport omit from 'lodash/omit'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Change} change\n */\n\nChanges.redo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const next = redos.peek()\n  if (!next) return\n\n  // Shift the next value into the undo stack.\n  redos = redos.pop()\n  undos = undos.push(next)\n\n  // Replay the next operations.\n  next.forEach(op => {\n    const { type, properties } = op\n\n    // When the operation mutates the selection, omit its `isFocused` value to\n    // prevent the editor focus from changing during redoing.\n    if (type == 'set_selection') {\n      op = op.set('properties', omit(properties, 'isFocused'))\n    }\n\n    change.applyOperation(op, { save: false })\n  })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Change} change\n */\n\nChanges.undo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const previous = undos.peek()\n  if (!previous) return\n\n  // Shift the previous operations into the redo stack.\n  undos = undos.pop()\n  redos = redos.push(previous)\n\n  // Replay the inverse of the previous operations.\n  previous\n    .slice()\n    .reverse()\n    .map(invert)\n    .forEach(inverse => {\n      const { type, properties } = inverse\n\n      // When the operation mutates the selection, omit its `isFocused` value to\n      // prevent the editor focus from changing during undoing.\n      if (type == 'set_selection') {\n        inverse = inverse.set('properties', omit(properties, 'isFocused'))\n      }\n\n      change.applyOperation(inverse, { save: false })\n    })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import isEmpty from 'is-empty'\nimport pick from 'lodash/pick'\n\nimport Range from '../models/range'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Set `properties` on the selection.\n *\n * @param {Change} change\n * @param {Object} properties\n */\n\nChanges.select = (change, properties, options = {}) => {\n  properties = Range.createProperties(properties)\n\n  const { snapshot = false } = options\n  const { value } = change\n  const { document, selection } = value\n  const props = {}\n  const sel = selection.toJSON()\n  const next = selection.merge(properties).normalize(document)\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot == false && properties[k] == sel[k]) continue\n    props[k] = properties[k]\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties change the marks in some way.\n  const moved = ['anchorKey', 'anchorOffset', 'focusKey', 'focusOffset'].some(\n    p => props.hasOwnProperty(p)\n  )\n\n  if (sel.marks && properties.marks == sel.marks && moved) {\n    props.marks = null\n  }\n\n  // If there are no new properties to set, abort.\n  if (isEmpty(props)) {\n    return\n  }\n\n  // Apply the operation.\n  change.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: props,\n      selection: sel,\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\n/**\n * Select the whole document.\n *\n * @param {Change} change\n */\n\nChanges.selectAll = change => {\n  const { value } = change\n  const { document, selection } = value\n  const next = selection.moveToRangeOf(document)\n  change.select(next)\n}\n\n/**\n * Snapshot the current selection.\n *\n * @param {Change} change\n */\n\nChanges.snapshotSelection = change => {\n  const { value } = change\n  const { selection } = value\n  change.select(selection, { snapshot: true })\n}\n\n/**\n * Move the anchor point backward, accounting for being at the start of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveAnchorCharBackward = change => {\n  const { value } = change\n  const { document, selection, anchorText, anchorBlock } = value\n  const { anchorOffset } = selection\n  const previousText = document.getPreviousText(anchorText.key)\n  const isInVoid = document.hasVoidParent(anchorText.key)\n  const isPreviousInVoid =\n    previousText && document.hasVoidParent(previousText.key)\n\n  if (!isInVoid && anchorOffset > 0) {\n    change.moveAnchor(-1)\n    return\n  }\n\n  if (!previousText) {\n    return\n  }\n\n  change.moveAnchorToEndOf(previousText)\n\n  if (!isInVoid && !isPreviousInVoid && anchorBlock.hasNode(previousText.key)) {\n    change.moveAnchor(-1)\n  }\n}\n\n/**\n * Move the anchor point forward, accounting for being at the end of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveAnchorCharForward = change => {\n  const { value } = change\n  const { document, selection, anchorText, anchorBlock } = value\n  const { anchorOffset } = selection\n  const nextText = document.getNextText(anchorText.key)\n  const isInVoid = document.hasVoidParent(anchorText.key)\n  const isNextInVoid = nextText && document.hasVoidParent(nextText.key)\n\n  if (!isInVoid && anchorOffset < anchorText.text.length) {\n    change.moveAnchor(1)\n    return\n  }\n\n  if (!nextText) {\n    return\n  }\n\n  change.moveAnchorToStartOf(nextText)\n\n  if (!isInVoid && !isNextInVoid && anchorBlock.hasNode(nextText.key)) {\n    change.moveAnchor(1)\n  }\n}\n\n/**\n * Move the focus point backward, accounting for being at the start of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveFocusCharBackward = change => {\n  const { value } = change\n  const { document, selection, focusText, focusBlock } = value\n  const { focusOffset } = selection\n  const previousText = document.getPreviousText(focusText.key)\n  const isInVoid = document.hasVoidParent(focusText.key)\n  const isPreviousInVoid =\n    previousText && document.hasVoidParent(previousText.key)\n\n  if (!isInVoid && focusOffset > 0) {\n    change.moveFocus(-1)\n    return\n  }\n\n  if (!previousText) {\n    return\n  }\n\n  change.moveFocusToEndOf(previousText)\n\n  if (!isInVoid && !isPreviousInVoid && focusBlock.hasNode(previousText.key)) {\n    change.moveFocus(-1)\n  }\n}\n\n/**\n * Move the focus point forward, accounting for being at the end of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveFocusCharForward = change => {\n  const { value } = change\n  const { document, selection, focusText, focusBlock } = value\n  const { focusOffset } = selection\n  const nextText = document.getNextText(focusText.key)\n  const isInVoid = document.hasVoidParent(focusText.key)\n  const isNextInVoid = nextText && document.hasVoidParent(nextText.key)\n\n  if (!isInVoid && focusOffset < focusText.text.length) {\n    change.moveFocus(1)\n    return\n  }\n\n  if (!nextText) {\n    return\n  }\n\n  change.moveFocusToStartOf(nextText)\n\n  if (!isInVoid && !isNextInVoid && focusBlock.hasNode(nextText.key)) {\n    change.moveFocus(1)\n  }\n}\n\n/**\n * Mix in move methods.\n */\n\nconst MOVE_DIRECTIONS = ['Forward', 'Backward']\n\nMOVE_DIRECTIONS.forEach(direction => {\n  const anchor = `moveAnchorChar${direction}`\n  const focus = `moveFocusChar${direction}`\n\n  Changes[`moveChar${direction}`] = change => {\n    change[anchor]()[focus]()\n  }\n\n  Changes[`moveStartChar${direction}`] = change => {\n    if (change.value.isBackward) {\n      change[focus]()\n    } else {\n      change[anchor]()\n    }\n  }\n\n  Changes[`moveEndChar${direction}`] = change => {\n    if (change.value.isBackward) {\n      change[anchor]()\n    } else {\n      change[focus]()\n    }\n  }\n\n  Changes[`extendChar${direction}`] = change => {\n    change[`moveFocusChar${direction}`]()\n  }\n\n  Changes[`collapseChar${direction}`] = change => {\n    const collapse =\n      direction == 'Forward' ? 'collapseToEnd' : 'collapseToStart'\n    change[collapse]()[`moveChar${direction}`]()\n  }\n})\n\n/**\n * Mix in alias methods.\n */\n\nconst ALIAS_METHODS = [\n  ['collapseLineBackward', 'collapseToStartOfBlock'],\n  ['collapseLineForward', 'collapseToEndOfBlock'],\n  ['extendLineBackward', 'extendToStartOfBlock'],\n  ['extendLineForward', 'extendToEndOfBlock'],\n]\n\nALIAS_METHODS.forEach(([alias, method]) => {\n  Changes[alias] = function(change, ...args) {\n    change[method](change, ...args)\n  }\n})\n\n/**\n * Mix in selection changes that are just a proxy for the selection method.\n */\n\nconst PROXY_TRANSFORMS = [\n  'blur',\n  'collapseTo',\n  'collapseToAnchor',\n  'collapseToEnd',\n  'collapseToEndOf',\n  'collapseToFocus',\n  'collapseToStart',\n  'collapseToStartOf',\n  'extend',\n  'extendTo',\n  'extendToEndOf',\n  'extendToStartOf',\n  'flip',\n  'focus',\n  'move',\n  'moveAnchor',\n  'moveAnchorOffsetTo',\n  'moveAnchorTo',\n  'moveAnchorToEndOf',\n  'moveAnchorToStartOf',\n  'moveEnd',\n  'moveEndOffsetTo',\n  'moveEndTo',\n  'moveFocus',\n  'moveFocusOffsetTo',\n  'moveFocusTo',\n  'moveFocusToEndOf',\n  'moveFocusToStartOf',\n  'moveOffsetsTo',\n  'moveStart',\n  'moveStartOffsetTo',\n  'moveStartTo',\n  'moveTo',\n  'moveToEnd',\n  'moveToEndOf',\n  'moveToRangeOf',\n  'moveToStart',\n  'moveToStartOf',\n  'deselect',\n]\n\nPROXY_TRANSFORMS.forEach(method => {\n  Changes[method] = (change, ...args) => {\n    const normalize = method != 'deselect'\n    const { value } = change\n    const { document, selection } = value\n    let next = selection[method](...args)\n    if (normalize) next = next.normalize(document)\n    change.select(next)\n  }\n})\n\n/**\n * Mix in node-related changes.\n */\n\nconst PREFIXES = [\n  'moveTo',\n  'moveAnchorTo',\n  'moveFocusTo',\n  'moveStartTo',\n  'moveEndTo',\n  'collapseTo',\n  'extendTo',\n]\n\nconst DIRECTIONS = ['Next', 'Previous']\n\nconst OBJECTS = ['Block', 'Inline', 'Text']\n\nPREFIXES.forEach(prefix => {\n  const edges = ['Start', 'End']\n\n  if (prefix == 'moveTo') {\n    edges.push('Range')\n  }\n\n  edges.forEach(edge => {\n    const method = `${prefix}${edge}Of`\n\n    OBJECTS.forEach(object => {\n      const getNode = object == 'Text' ? 'getNode' : `getClosest${object}`\n\n      Changes[`${method}${object}`] = change => {\n        const { value } = change\n        const { document, selection } = value\n        const node = document[getNode](selection.startKey)\n        if (!node) return\n        change[method](node)\n      }\n\n      DIRECTIONS.forEach(direction => {\n        const getDirectionNode = `get${direction}${object}`\n        const directionKey = direction == 'Next' ? 'startKey' : 'endKey'\n\n        Changes[`${method}${direction}${object}`] = change => {\n          const { value } = change\n          const { document, selection } = value\n          const node = document[getNode](selection[directionKey])\n          if (!node) return\n          const target = document[getDirectionNode](node.key)\n          if (!target) return\n          change[method](target)\n        }\n      })\n    })\n  })\n})\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import Value from '../models/value'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Change} change\n * @param {Object|Value} properties\n * @param {Object} options\n */\n\nChanges.setValue = (change, properties, options = {}) => {\n  properties = Value.createProperties(properties)\n  const { value } = change\n\n  change.applyOperation(\n    {\n      type: 'set_value',\n      properties,\n      value,\n    },\n    options\n  )\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Normalize the value with its schema.\n *\n * @param {Change} change\n */\n\nChanges.normalize = change => {\n  change.normalizeDocument()\n}\n\n/**\n * Normalize the document with the value's schema.\n *\n * @param {Change} change\n */\n\nChanges.normalizeDocument = change => {\n  const { value } = change\n  const { document } = value\n  change.normalizeNodeByKey(document.key)\n}\n\n/**\n * Normalize a `node` and its children with the value's schema.\n *\n * @param {Change} change\n * @param {Node|String} key\n */\n\nChanges.normalizeNodeByKey = (change, key) => {\n  const { value } = change\n  let { document, schema } = value\n  const node = document.assertNode(key)\n\n  normalizeNodeAndChildren(change, node, schema)\n\n  document = change.value.document\n  const ancestors = document.getAncestors(key)\n  if (!ancestors) return\n\n  ancestors.forEach(ancestor => {\n    if (change.value.document.getDescendant(ancestor.key)) {\n      normalizeNode(change, ancestor, schema)\n    }\n  })\n}\n\n/**\n * Normalize a `node` and its children with a `schema`.\n *\n * @param {Change} change\n * @param {Node} node\n * @param {Schema} schema\n */\n\nfunction normalizeNodeAndChildren(change, node, schema) {\n  if (node.object == 'text') {\n    normalizeNode(change, node, schema)\n    return\n  }\n\n  let child = node.getFirstInvalidDescendant(schema)\n  let path = change.value.document.getPath(node.key)\n\n  while (node && child) {\n    normalizeNodeAndChildren(change, child, schema)\n    node = change.value.document.refindNode(path, node.key)\n\n    if (!node) {\n      path = []\n      child = null\n    } else {\n      path = change.value.document.refindPath(path, node.key)\n      child = node.getFirstInvalidDescendant(schema)\n    }\n  }\n\n  // Normalize the node itself if it still exists.\n  if (node) {\n    normalizeNode(change, node, schema)\n  }\n}\n\n/**\n * Normalize a `node` with a `schema`, but not its children.\n *\n * @param {Change} change\n * @param {Node} node\n * @param {Schema} schema\n */\n\nfunction normalizeNode(change, node, schema) {\n  const max = schema.stack.plugins.length + 1\n  let iterations = 0\n\n  function iterate(c, n) {\n    const normalize = n.validate(schema)\n    if (!normalize) return\n\n    // Run the `normalize` function to fix the node.\n    let path = c.value.document.getPath(n.key)\n    normalize(c)\n\n    // Re-find the node reference, in case it was updated. If the node no longer\n    // exists, we're done for this branch.\n    n = c.value.document.refindNode(path, n.key)\n    if (!n) return\n\n    path = c.value.document.refindPath(path, n.key)\n\n    // Increment the iterations counter, and check to make sure that we haven't\n    // exceeded the max. Without this check, it's easy for the `validate` or\n    // `normalize` function of a schema rule to be written incorrectly and for\n    // an infinite invalid loop to occur.\n    iterations++\n\n    if (iterations > max) {\n      throw new Error(\n        'A schema rule could not be validated after sufficient iterations. This is usually due to a `rule.validate` or `rule.normalize` function of a schema being incorrectly written, causing an infinite loop.'\n      )\n    }\n\n    // Otherwise, iterate again.\n    iterate(c, n)\n  }\n\n  iterate(change, node)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import AtCurrentRange from './at-current-range'\nimport AtRange from './at-range'\nimport ByKey from './by-key'\nimport OnHistory from './on-history'\nimport OnSelection from './on-selection'\nimport OnValue from './on-value'\nimport WithSchema from './with-schema'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  ...AtCurrentRange,\n  ...AtRange,\n  ...ByKey,\n  ...OnHistory,\n  ...OnSelection,\n  ...OnValue,\n  ...WithSchema,\n}\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Apply adjustments to affected ranges (selections, decorations);\n * accepts (value, checking function(range) -> bool, applying function(range) -> range)\n * returns value with affected ranges updated\n *\n * @param {Value} value\n * @param {Function} checkAffected\n * @param {Function} adjustRange\n * @return {Value}\n */\n\nfunction applyRangeAdjustments(value, checkAffected, adjustRange) {\n  // check selection, apply adjustment if affected\n  if (value.selection && checkAffected(value.selection)) {\n    value = value.set('selection', adjustRange(value.selection))\n  }\n\n  if (!value.decorations) return value\n\n  // check all ranges, apply adjustment if affected\n  const decorations = value.decorations\n    .map(\n      decoration =>\n        checkAffected(decoration) ? adjustRange(decoration) : decoration\n    )\n    .filter(decoration => decoration.anchorKey !== null)\n  return value.set('decorations', decorations)\n}\n\n/**\n * clear any atomic ranges (in decorations) if they contain the point (key, offset, offset-end?)\n * specified\n *\n * @param {Value} value\n * @param {String} key\n * @param {Number} offset\n * @param {Number?} offsetEnd\n * @return {Value}\n */\n\nfunction clearAtomicRangesIfContains(value, key, offset, offsetEnd = null) {\n  return applyRangeAdjustments(\n    value,\n    range => {\n      if (!range.isAtomic) return false\n      const { startKey, startOffset, endKey, endOffset } = range\n      return (\n        (startKey == key &&\n          startOffset < offset &&\n          (endKey != key || endOffset > offset)) ||\n        (offsetEnd &&\n          startKey == key &&\n          startOffset < offsetEnd &&\n          (endKey != key || endOffset > offsetEnd))\n      )\n    },\n    range => range.deselect()\n  )\n}\n\n/**\n * Applying functions.\n *\n * @type {Object}\n */\n\nconst APPLIERS = {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  add_mark(value, operation) {\n    const { path, offset, length, mark } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.addMark(offset, length, mark)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Insert a `node` at `index` in a node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  insert_node(value, operation) {\n    const { path, node } = operation\n    const index = path[path.length - 1]\n    const rest = path.slice(0, -1)\n    let { document } = value\n    let parent = document.assertPath(rest)\n    parent = parent.insertNode(index, node)\n    document = document.updateNode(parent)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  insert_text(value, operation) {\n    const { path, offset, text, marks } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n\n    // Update the document\n    node = node.insertText(offset, text, marks)\n    document = document.updateNode(node)\n\n    value = value.set('document', document)\n\n    // if insert happens within atomic ranges, clear\n    value = clearAtomicRangesIfContains(value, node.key, offset)\n\n    // Update the selection, decorations\n    value = applyRangeAdjustments(\n      value,\n      ({ anchorKey, anchorOffset, isBackward, isAtomic }) =>\n        anchorKey == node.key &&\n        (anchorOffset > offset ||\n          (anchorOffset == offset && (!isAtomic || !isBackward))),\n      range => range.moveAnchor(text.length)\n    )\n\n    value = applyRangeAdjustments(\n      value,\n      ({ focusKey, focusOffset, isBackward, isAtomic }) =>\n        focusKey == node.key &&\n        (focusOffset > offset ||\n          (focusOffset == offset && (!isAtomic || isBackward))),\n      range => range.moveFocus(text.length)\n    )\n\n    return value\n  },\n\n  /**\n   * Merge a node at `path` with the previous node.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  merge_node(value, operation) {\n    const { path } = operation\n    const withPath = path\n      .slice(0, path.length - 1)\n      .concat([path[path.length - 1] - 1])\n    let { document } = value\n    const one = document.assertPath(withPath)\n    const two = document.assertPath(path)\n    let parent = document.getParent(one.key)\n    const oneIndex = parent.nodes.indexOf(one)\n    const twoIndex = parent.nodes.indexOf(two)\n\n    // Perform the merge in the document.\n    parent = parent.mergeNode(oneIndex, twoIndex)\n    document = document.updateNode(parent)\n    value = value.set('document', document)\n\n    if (one.object == 'text') {\n      value = applyRangeAdjustments(\n        value,\n        // If the nodes are text nodes and the range is inside the second node:\n        ({ anchorKey, focusKey }) =>\n          anchorKey == two.key || focusKey == two.key,\n        // update it to refer to the first node instead:\n        range => {\n          if (range.anchorKey == two.key)\n            range = range.moveAnchorTo(\n              one.key,\n              one.text.length + range.anchorOffset\n            )\n          if (range.focusKey == two.key)\n            range = range.moveFocusTo(\n              one.key,\n              one.text.length + range.focusOffset\n            )\n          return range.normalize(document)\n        }\n      )\n    }\n\n    return value\n  },\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  move_node(value, operation) {\n    const { path, newPath } = operation\n    const newIndex = newPath[newPath.length - 1]\n    const newParentPath = newPath.slice(0, -1)\n    const oldParentPath = path.slice(0, -1)\n    const oldIndex = path[path.length - 1]\n    let { document } = value\n    const node = document.assertPath(path)\n\n    // Remove the node from its current parent.\n    let parent = document.getParent(node.key)\n    parent = parent.removeNode(oldIndex)\n    document = document.updateNode(parent)\n\n    // Find the new target...\n    let target\n\n    // If the old path and the rest of the new path are the same, then the new\n    // target is the old parent.\n    if (\n      oldParentPath.every((x, i) => x === newParentPath[i]) &&\n      oldParentPath.length === newParentPath.length\n    ) {\n      target = parent\n    } else if (\n      oldParentPath.every((x, i) => x === newParentPath[i]) &&\n      oldIndex < newParentPath[oldParentPath.length]\n    ) {\n      // Otherwise, if the old path removal resulted in the new path being no longer\n      // correct, we need to decrement the new path at the old path's last index.\n      newParentPath[oldParentPath.length]--\n      target = document.assertPath(newParentPath)\n    } else {\n      // Otherwise, we can just grab the target normally...\n      target = document.assertPath(newParentPath)\n    }\n\n    // Insert the new node to its new parent.\n    target = target.insertNode(newIndex, node)\n    document = document.updateNode(target)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Remove mark from text at `offset` and `length` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  remove_mark(value, operation) {\n    const { path, offset, length, mark } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.removeMark(offset, length, mark)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  remove_node(value, operation) {\n    const { path } = operation\n    let { document, selection } = value\n    const node = document.assertPath(path)\n\n    if (selection.isSet || value.decorations !== null) {\n      const first = node.object == 'text' ? node : node.getFirstText() || node\n      const last = node.object == 'text' ? node : node.getLastText() || node\n      const prev = document.getPreviousText(first.key)\n      const next = document.getNextText(last.key)\n\n      value = applyRangeAdjustments(\n        value,\n        // If the start or end point was in this node\n        ({ startKey, endKey }) =>\n          node.hasNode(startKey) || node.hasNode(endKey),\n        // update it to be just before/after\n        range => {\n          const { startKey, endKey } = range\n\n          if (node.hasNode(startKey)) {\n            range = prev\n              ? range.moveStartTo(prev.key, prev.text.length)\n              : next ? range.moveStartTo(next.key, 0) : range.deselect()\n          }\n\n          if (node.hasNode(endKey)) {\n            range = prev\n              ? range.moveEndTo(prev.key, prev.text.length)\n              : next ? range.moveEndTo(next.key, 0) : range.deselect()\n          }\n\n          // If the range wasn't deselected, normalize it.\n          if (range.isSet) return range.normalize(document)\n          return range\n        }\n      )\n    }\n\n    // Remove the node from the document.\n    let parent = document.getParent(node.key)\n    const index = parent.nodes.indexOf(node)\n    parent = parent.removeNode(index)\n    document = document.updateNode(parent)\n\n    // Update the document and range.\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  remove_text(value, operation) {\n    const { path, offset, text } = operation\n    const { length } = text\n    const rangeOffset = offset + length\n    let { document } = value\n\n    let node = document.assertPath(path)\n\n    // if insert happens within atomic ranges, clear\n    value = clearAtomicRangesIfContains(\n      value,\n      node.key,\n      offset,\n      offset + length\n    )\n\n    value = applyRangeAdjustments(\n      value,\n      // if anchor of range is here\n      ({ anchorKey }) => anchorKey == node.key,\n      // adjust if it is in or past the removal range\n      range =>\n        range.anchorOffset >= rangeOffset\n          ? range.moveAnchor(-length)\n          : range.anchorOffset > offset\n            ? range.moveAnchorTo(range.anchorKey, offset)\n            : range\n    )\n\n    value = applyRangeAdjustments(\n      value,\n      // if focus of range is here\n      ({ focusKey }) => focusKey == node.key,\n      // adjust if it is in or past the removal range\n      range =>\n        range.focusOffset >= rangeOffset\n          ? range.moveFocus(-length)\n          : range.focusOffset > offset\n            ? range.moveFocusTo(range.focusKey, offset)\n            : range\n    )\n\n    node = node.removeText(offset, length)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Set `properties` on mark on text at `offset` and `length` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_mark(value, operation) {\n    const { path, offset, length, mark, properties } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.updateMark(offset, length, mark, properties)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Set `properties` on a node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_node(value, operation) {\n    const { path, properties } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.merge(properties)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_selection(value, operation) {\n    const { properties } = operation\n    const { anchorPath, focusPath, ...props } = properties\n    let { document, selection } = value\n\n    if (anchorPath !== undefined) {\n      props.anchorKey =\n        anchorPath === null ? null : document.assertPath(anchorPath).key\n    }\n\n    if (focusPath !== undefined) {\n      props.focusKey =\n        focusPath === null ? null : document.assertPath(focusPath).key\n    }\n\n    selection = selection.merge(props)\n    selection = selection.normalize(document)\n    value = value.set('selection', selection)\n    return value\n  },\n\n  /**\n   * Set `properties` on `value`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_value(value, operation) {\n    const { properties } = operation\n    value = value.merge(properties)\n    return value\n  },\n\n  /**\n   * Split a node by `path` at `offset`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  split_node(value, operation) {\n    const { path, position, properties } = operation\n    let { document } = value\n\n    // Calculate a few things...\n    const node = document.assertPath(path)\n    let parent = document.getParent(node.key)\n    const index = parent.nodes.indexOf(node)\n\n    // Split the node by its parent.\n    parent = parent.splitNode(index, position)\n\n    if (properties) {\n      const splitNode = parent.nodes.get(index + 1)\n\n      if (splitNode.object !== 'text') {\n        parent = parent.updateNode(splitNode.merge(properties))\n      }\n    }\n\n    document = document.updateNode(parent)\n    const next = document.getNextText(node.key)\n\n    value = applyRangeAdjustments(\n      value,\n      // check if range is affected\n      ({ startKey, startOffset, endKey, endOffset }) =>\n        (node.key == startKey && position <= startOffset) ||\n        (node.key == endKey && position <= endOffset),\n      // update its start / end as needed\n      range => {\n        const { startKey, startOffset, endKey, endOffset } = range\n        let normalize = false\n\n        if (node.key == startKey && position <= startOffset) {\n          range = range.moveStartTo(next.key, startOffset - position)\n          normalize = true\n        }\n\n        if (node.key == endKey && position <= endOffset) {\n          range = range.moveEndTo(next.key, endOffset - position)\n          normalize = true\n        }\n\n        // Normalize the selection if we changed it\n        if (normalize) return range.normalize(document)\n        return range\n      }\n    )\n\n    // Return the updated value.\n    value = value.set('document', document)\n    return value\n  },\n}\n\n/**\n * Apply an `operation` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} operation\n * @return {Value} value\n */\n\nfunction applyOperation(value, operation) {\n  operation = Operation.create(operation)\n  const { type } = operation\n  const apply = APPLIERS[type]\n\n  if (!apply) {\n    throw new Error(`Unknown operation type: \"${type}\".`)\n  }\n\n  debug(type, operation)\n  value = apply(value, operation)\n  return value\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport pick from 'lodash/pick'\nimport { List } from 'immutable'\n\nimport MODEL_TYPES, { isType } from '../constants/model-types'\nimport Changes from '../changes'\nimport Operation from './operation'\nimport apply from '../operations/apply'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:change')\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change {\n  /**\n   * Check if `any` is a `Change`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isChange = isType.bind(null, 'CHANGE')\n\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object} attrs\n   *   @property {Value} value\n   */\n\n  constructor(attrs) {\n    const { value } = attrs\n    this.value = value\n    this.operations = new List()\n\n    this.flags = {\n      normalize: true,\n      ...pick(attrs, ['merge', 'save', 'normalize']),\n    }\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'change'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Apply an `operation` to the current value, saving the operation to the\n   * history if needed.\n   *\n   * @param {Operation|Object} operation\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperation(operation, options = {}) {\n    const { operations, flags } = this\n    let { value } = this\n    let { history } = value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Default options to the change-level flags, this allows for setting\n    // specific options for all of the operations of a given change.\n    options = { ...flags, ...options }\n\n    // Derive the default option values.\n    const {\n      merge = operations.size == 0 ? null : true,\n      save = true,\n      skip = null,\n    } = options\n\n    // Apply the operation to the value.\n    debug('apply', { operation, save, merge })\n    value = apply(value, operation)\n\n    // If needed, save the operation to the history.\n    if (history && save) {\n      history = history.save(operation, { merge, skip })\n      value = value.set('history', history)\n    }\n\n    // Update the mutable change object.\n    this.value = value\n    this.operations = operations.push(operation)\n    return this\n  }\n\n  /**\n   * Apply a series of `operations` to the current value.\n   *\n   * @param {Array|List} operations\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperations(operations, options) {\n    operations.forEach(op => this.applyOperation(op, options))\n    return this\n  }\n\n  /**\n   * Call a change `fn` with arguments.\n   *\n   * @param {Function} fn\n   * @param {Mixed} ...args\n   * @return {Change}\n   */\n\n  call(fn, ...args) {\n    fn(this, ...args)\n    return this\n  }\n\n  /**\n   * Applies a series of change mutations and defers normalization until the end.\n   *\n   * @param {Function} customChange - function that accepts a change object and executes change operations\n   * @return {Change}\n   */\n\n  withoutNormalization(customChange) {\n    const original = this.flags.normalize\n    this.setOperationFlag('normalize', false)\n\n    try {\n      customChange(this)\n      // if the change function worked then run normalization\n      this.normalizeDocument()\n    } finally {\n      // restore the flag to whatever it was\n      this.setOperationFlag('normalize', original)\n    }\n    return this\n  }\n\n  /**\n   * Set an operation flag by `key` to `value`.\n   *\n   * @param {String} key\n   * @param {Any} value\n   * @return {Change}\n   */\n\n  setOperationFlag(key, value) {\n    this.flags[key] = value\n    return this\n  }\n\n  /**\n   * Get the `value` of the specified flag by its `key`. Optionally accepts an `options`\n   * object with override flags.\n   *\n   * @param {String} key\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  getFlag(key, options = {}) {\n    return options[key] !== undefined ? options[key] : this.flags[key]\n  }\n\n  /**\n   * Unset an operation flag by `key`.\n   *\n   * @param {String} key\n   * @return {Change}\n   */\n\n  unsetOperationFlag(key) {\n    delete this.flags[key]\n    return this\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nChange.prototype[MODEL_TYPES.CHANGE] = true\n\n/**\n * Add a change method for each of the changes.\n */\n\nObject.keys(Changes).forEach(type => {\n  Change.prototype[type] = function(...args) {\n    debug(type, { args })\n    this.call(Changes[type], ...args)\n    return this\n  }\n})\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","import apply from './apply'\nimport invert from './invert'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  apply,\n  invert,\n}\n","import Block from './models/block'\nimport Change from './models/change'\nimport Changes from './changes'\nimport Character from './models/character'\nimport Data from './models/data'\nimport Document from './models/document'\nimport History from './models/history'\nimport Inline from './models/inline'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport Operations from './operations'\nimport Range from './models/range'\nimport Schema from './models/schema'\nimport Stack from './models/stack'\nimport Text from './models/text'\nimport Value from './models/value'\nimport { resetKeyGenerator, setKeyGenerator } from './utils/generate-key'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Changes,\n  Character,\n  Data,\n  Document,\n  History,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  Range,\n  Schema,\n  Stack,\n  Text,\n  Value,\n  resetKeyGenerator,\n  setKeyGenerator,\n  resetMemoization,\n  useMemoization,\n}\n\nexport default {\n  Block,\n  Changes,\n  Character,\n  Data,\n  Document,\n  History,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  Range,\n  Schema,\n  Stack,\n  Text,\n  Value,\n  resetKeyGenerator,\n  setKeyGenerator,\n  resetMemoization,\n  useMemoization,\n}\n"],"names":["MODEL_TYPES","isType","type","any","n","generate","generateKey","setKeyGenerator","func","resetKeyGenerator","DEFAULTS","Map","undefined","List","Block","options","object","isVoid","data","toJSON","nodes","toArray","map","preserveKeys","key","deprecate","some","child","isEmpty","getText","attrs","isBlock","isPlainObject","fromJSON","Error","isList","Array","isArray","list","create","block","createChildren","every","item","Record","fromJS","bind","prototype","BLOCK","Inline","isInline","elements","inline","INLINE","Data","isMap","ENABLED","CACHE_KEY","LEAF","UNDEFINED","UNSET","memoize","properties","property","original","args","apply","__cache_key","__cache","__cache_no_args","__proto__","takesArguments","length","cachedValue","keys","getIn","value","v","setIn","get","parent","set","resetMemoization","Number","MAX_SAFE_INTEGER","useMemoization","enabled","Mark","schema","__getComponent","isMark","Set","isSet","marks","props","mark","MARK","Changes","PROXY_TRANSFORMS","forEach","method","change","selection","methodAtRange","match","collapseToStart","collapseToEnd","setBlock","setBlocks","setInline","setInlines","addMark","document","isExpanded","addMarkAtRange","add","sel","select","getActiveMarksAtRange","addMarks","delete","deleteAtRange","insertBlock","insertBlockAtRange","node","getNode","collapseToEndOf","insertFragment","fragment","size","startText","endText","startInline","lastText","getLastText","lastInline","getClosestInline","firstChild","first","lastChild","last","getTexts","text","isAppending","hasEdgeAtStartOf","hasEdgeAtEndOf","isInserting","hasBlocks","insertFragmentAtRange","newTexts","filter","includes","newText","takeLast","collapseToStartOf","move","insertInline","insertInlineAtRange","insertText","getInsertMarksAtRange","insertTextAtRange","splitBlock","depth","splitBlockAtRange","removeMark","removeMarkAtRange","remove","replaceMark","oldMark","newMark","toggleMark","exists","activeMarks","has","wrapText","prefix","suffix","wrapTextAtRange","isCollapsed","moveStart","moveEnd","isForward","flip","Document","isDocument","DOCUMENT","Range","anchorOffset","getFirst","anchorKey","getLast","start","end","hasAnchorIn","hasDescendant","focusKey","focusOffset","hasFocusIn","hasAnchorAtStartOf","hasAnchorAtEndOf","merge","isBackward","offset","moveAnchorOffsetTo","moveFocusOffsetTo","moveFocusTo","moveAnchorTo","range","moveAnchorToStartOf","moveFocusToEndOf","anchorOffsetType","focusOffsetType","warn","anchorNode","getDescendant","focusNode","getFirstText","anchorText","getTextAtOffset","getOffset","focusText","areDescendantsSorted","isFocused","m","isAtomic","isRange","anchorPath","focusPath","createSet","obj","RANGE","MOVE_METHODS","p","s","EDGE_METHODS","hasEdge","anchor","focus","ALIAS_METHODS","alias","Character","isCharacter","split","character","CHARACTER","Leaf","characters","createList","char","equals","newMarks","withMutations","union","isLeaf","leaves","invalid","result","findLast","leaf","index","firstLeaf","cache","unshift","endOffset","left","right","find","startOffset","slice","of","take","skip","push","Text","reduce","string","l","newFirst","splitLeaves","before","bundle","middle","after","concat","x","setLeaves","__getDecorations","decorations","startKey","endKey","hasStart","hasEnd","createLeaves","getActiveMarks","leafEnd","leafStart","intersect","c","getMarks","array","getMarksAsArray","OrderedSet","searchLeafAtOffset","delta","beforeText","afterText","nextLeaves","splice","getLeaves","r","updateMark","splitted","one","two","regenerateKey","validateNode","validate","getString","flatMap","getCharacters","isText","TEXT","Node","second","assertKey","getKeysAsArray","firstIndex","indexOf","secondIndex","getChild","descendant","path","getDescendantAtPath","iterator","matches","forEachDescendant","i","found","ret","hasChild","ancestors","getAncestors","getBlocksAsArray","isLeafBlock","getBlocksAtRangeAsArray","normalize","isUnset","startBlock","getClosestBlock","endBlock","blocks","getBlocksByTypeAsArray","t","getTextsAtRange","rest","getClosest","assertDescendant","oneParent","getParent","twoParent","stack","startAt","getFurthestAncestor","getDepth","descendantFound","previous","position","splitNode","updateNode","getNextText","startNode","getNextSibling","endNode","startIndex","endIndex","getFurthest","shift","reverse","takeUntil","getInlinesAsArray","isLeafInline","getInlinesAtRangeAsArray","getTextsAtRangeAsArray","getInlinesByTypeAsArray","inlines","desc","getOrderedMarksAtRange","getMarksAtPosition","getMarksAtIndex","getOrderedMarksBetweenPositions","getMarksBetweenOffsets","texts","getTextsBetweenPositionsAsArray","toSet","getPreviousText","getActiveMarksBetweenOffsets","startMarks","endMarks","currentMarks","closestBlock","getMarksByTypeAsArray","next","skipUntil","memo","assertNode","ancestor","getPath","__getPlaceholder","isSelected","dir","direction","getTextsAsArray","getClosestVoid","mapDescendants","insert","withIndex","mergeText","removeNode","insertNode","findIndex","splitText","befores","afters","getFirstInvalidDescendant","isNode","kind","arg","Object","getOwnPropertyNames","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","isSurrogate","code","isWord","remaining","test","charAt","getCharLength","charCodeAt","getCharOffset","getCharOffsetBackward","getCharOffsetForward","getWordOffset","started","getWordOffsetBackward","o","getWordOffsetForward","getFlag","addMarkByKey","addMarksAtRange","snapshotSelection","isStartVoid","hasVoidParent","isEndVoid","isHanging","prevText","startVoid","nextText","removeNodeByKey","endVoid","removeTextByKey","startLength","endLength","getCommonAncestor","startChild","endChild","startParent","startParentIndex","endParentIndex","startChildIndex","endChildIndex","middles","lonely","getFurthestOnlyChildAncestor","moveNodeByKey","mergeNodeByKey","normalizeNodeByKey","deleteCharBackwardAtRange","String","deleteBackwardAtRange","deleteLineBackwardAtRange","deleteWordBackwardAtRange","voidParent","isAtStartOf","prev","prevBlock","prevVoid","traversed","deleteCharForwardAtRange","deleteForwardAtRange","deleteLineForwardAtRange","deleteWordForwardAtRange","nextBlock","getNextBlock","moveToStartOf","isAtEndOf","nextVoid","extra","insertNodeByKey","splitDescendantsByKey","collapseTo","isAtStart","getBlocks","firstBlock","lastBlock","lonelyParent","lonelyChild","removeDescendant","newIndex","nextChild","nextNodes","lastIndex","inlineChild","inlineIndex","splitNodeByKey","insertTextByKey","commonAncestor","normalizeAncestor","normalizeKey","removeMarkByKey","setBlocksAtRange","getBlocksAtRange","sets","setNodeByKey","setBlockAtRange","setInlinesAtRange","getInlinesAtRange","setInlineAtRange","height","h","splitInlineAtRange","Infinity","toggleMarkAtRange","unwrapBlockAtRange","createProperties","wrappers","isSuperset","toOrderedSet","toList","children","b","firstMatch","lastMatch","firstText","normalizeDocument","unwrapInlineAtRange","wrapBlockAtRange","clear","firstblock","lastblock","siblings","p1","p2","indexes","ind","wrapInlineAtRange","inlineParent","wrapInlineByKey","startInner","startInnerIndex","endInner","startInlines","endInlines","operations","bx","by","ax","ay","Math","max","min","applyOperations","insertFragmentByKey","applyOperation","getPreviousSibling","newKey","newPath","removeAllMarksByKey","state","setTextByKey","textNode","replaceTextByKey","activeMark","removals","replaceNodeByKey","newNode","setMarkByKey","target","textKey","textOffset","a","prevIndex","unwrapInlineByKey","moveToRangeOf","unwrapBlockByKey","unwrapNodeByKey","isFirst","isLast","parentParent","parentIndex","wrapBlockByKey","wrapNodeByKey","OPERATION_ATTRIBUTES","debug","Debug","Stack","History","operation","history","undos","redos","prevBatch","peek","prevOperation","shouldSkip","shouldMerge","batch","pop","isHistory","HISTORY","isEqual","CORE_SCHEMA_RULES","invalids","objects","insertBefore","insertAfter","Boolean","plugins","plugin","getPluginsWith","reduceRight","STACK","Schema","parents","rule","violation","context","CHILD_OBJECT_INVALID","CHILD_TYPE_INVALID","CHILD_UNKNOWN","FIRST_CHILD_OBJECT_INVALID","FIRST_CHILD_TYPE_INVALID","LAST_CHILD_OBJECT_INVALID","LAST_CHILD_TYPE_INVALID","CHILD_REQUIRED","NODE_TEXT_INVALID","PARENT_INVALID","NODE_DATA_INVALID","NODE_IS_VOID_INVALID","NODE_MARK_INVALID","getRule","getParentRules","ctx","fail","fn","def","types","nextDef","defs","rewind","definedObjects","definedTypes","allowedObject","allowedType","allowed","isSchema","rules","resolveSchema","SCHEMA","d","resolveDocumentRule","bs","is","resolveNodeRule","customizer","source","Value","Change","preserveData","preserveDecorations","preserveHistory","preserveSelection","preserveSchema","withPath","decoration","isBlurred","getPreviousBlock","getNextInline","getPreviousInline","getCharactersAtRange","getMarksAtRange","getFragmentAtRange","isValue","save","VALUE","Operation","json","ATTRIBUTES","toJS","isOperation","OPERATION","invertOperation","op","inverse","inversePath","inverseNewPath","pathLast","newPathLast","e","inverseNode","inverseProperties","pick","inverseMark","assertPath","inverseSelection","inverseProps","inverseValue","redo","omit","undo","invert","snapshot","k","moved","hasOwnProperty","selectAll","moveAnchorCharBackward","anchorBlock","previousText","isInVoid","isPreviousInVoid","moveAnchor","moveAnchorToEndOf","hasNode","moveAnchorCharForward","isNextInVoid","moveFocusCharBackward","focusBlock","moveFocus","moveFocusCharForward","moveFocusToStartOf","MOVE_DIRECTIONS","collapse","PREFIXES","DIRECTIONS","OBJECTS","edges","edge","getDirectionNode","directionKey","setValue","normalizeNodeAndChildren","refindNode","refindPath","normalizeNode","iterations","iterate","AtCurrentRange","AtRange","ByKey","OnHistory","OnSelection","OnValue","WithSchema","applyRangeAdjustments","checkAffected","adjustRange","clearAtomicRangesIfContains","offsetEnd","deselect","APPLIERS","oneIndex","twoIndex","mergeNode","newParentPath","oldParentPath","oldIndex","moveStartTo","moveEndTo","rangeOffset","removeText","flags","customChange","setOperationFlag","isChange","CHANGE","call"],"mappings":"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"}